{"version":3,"file":"portal.js","sources":["../../../src/cdk/portal/index.ts","../../../src/cdk/portal/portal-directives.ts","../../../src/cdk/portal/dom-portal-host.ts","../../../src/cdk/portal/portal.ts","../../../src/cdk/portal/portal-errors.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {ComponentType,Portal,ComponentPortal,TemplatePortal,PortalHost,BasePortalHost,DomPortalHost,TemplatePortalDirective,PortalHostDirective,PortalModule} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n    NgModule,\r\n    ComponentRef,\r\n    Directive,\r\n    EmbeddedViewRef,\r\n    TemplateRef,\r\n    ComponentFactoryResolver,\r\n    ViewContainerRef,\r\n    OnDestroy,\r\n    Input,\r\n} from '@angular/core';\r\nimport {Portal, TemplatePortal, ComponentPortal, BasePortalHost} from './portal';\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\rthe directive instance itself can be attached to a host, enabling declarative use of portals.\r\rUsage:\r<ng-template portal #greeting>\r  <p> Hello {{name}} </p>\r</ng-template>\n */\nexport class TemplatePortalDirective extends TemplatePortal<any> {\n/**\n * @param {?} templateRef\n * @param {?} viewContainerRef\n */\nconstructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\r\n    super(templateRef, viewContainerRef);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[cdk-portal], [cdkPortal], [portal]',\r\n  exportAs: 'cdkPortal',\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n];\n}\n\nfunction TemplatePortalDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nTemplatePortalDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTemplatePortalDirective.ctorParameters;\n}\n\n/**\n * Directive version of a PortalHost. Because the directive *is* a PortalHost, portals can be\rdirectly attached to it, enabling declarative use.\r\rUsage:\r<ng-template [cdkPortalHost]=\"greeting\"></ng-template>\n */\nexport class PortalHostDirective extends BasePortalHost implements OnDestroy {\n/**\n * The attached portal.\n */\nprivate _portal: Portal<any> | null = null;\n/**\n * @param {?} _componentFactoryResolver\n * @param {?} _viewContainerRef\n */\nconstructor(\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _viewContainerRef: ViewContainerRef) {\r\n    super();\r\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedPortal() { return this.portal; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedPortal(v) { this.portal = v; }\n/**\n * Portal associated with the Portal host.\n * @return {?}\n */\nget portal(): Portal<any> | null {\r\n    return this._portal;\r\n  }\n/**\n * @param {?} portal\n * @return {?}\n */\nset portal(portal: Portal<any> | null) {\r\n    if (this.hasAttached()) {\r\n      super.detach();\r\n    }\r\n\r\n    if (portal) {\r\n      super.attach(portal);\r\n    }\r\n\r\n    this._portal = portal;\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    super.dispose();\r\n    this._portal = null;\r\n  }\n/**\n * Attach the given ComponentPortal to this PortalHost using the ComponentFactoryResolver.\r\r\\@param portal Portal to be attached to the portal host.\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\r\n    portal.setAttachedHost(this);\r\n\r\n    // If the portal specifies an origin, use that as the logical location of the component\r\n    // in the application tree. Otherwise use the location of this PortalHost.\r\n    let /** @type {?} */ viewContainerRef = portal.viewContainerRef != null ?\r\n        portal.viewContainerRef :\r\n        this._viewContainerRef;\r\n\r\n    let /** @type {?} */ componentFactory =\r\n        this._componentFactoryResolver.resolveComponentFactory(portal.component);\r\n    let /** @type {?} */ ref = viewContainerRef.createComponent(\r\n        componentFactory, viewContainerRef.length,\r\n        portal.injector || viewContainerRef.parentInjector);\r\n\r\n    super.setDisposeFn(() => ref.destroy());\r\n    this._portal = portal;\r\n\r\n    return ref;\r\n  }\n/**\n * Attach the given TemplatePortal to this PortlHost as an embedded View.\r\\@param portal Portal to be attached.\n * @template C\n * @param {?} portal\n * @return {?}\n */\nattachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\r\n    portal.setAttachedHost(this);\r\n    const /** @type {?} */ viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\r\n    super.setDisposeFn(() => this._viewContainerRef.clear());\r\n\r\n    this._portal = portal;\r\n\r\n    return viewRef;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[cdkPortalHost], [portalHost]',\r\n  inputs: ['portal: cdkPortalHost']\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ComponentFactoryResolver, },\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_deprecatedPortal': [{ type: Input, args: ['portalHost', ] },],\n};\n}\n\nfunction PortalHostDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPortalHostDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPortalHostDirective.ctorParameters;\n/** @type {?} */\nPortalHostDirective.propDecorators;\n/**\n * The attached portal.\n * @type {?}\n */\nPortalHostDirective.prototype._portal;\n/** @type {?} */\nPortalHostDirective.prototype._componentFactoryResolver;\n/** @type {?} */\nPortalHostDirective.prototype._viewContainerRef;\n}\n\nexport class PortalModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  exports: [TemplatePortalDirective, PortalHostDirective],\r\n  declarations: [TemplatePortalDirective, PortalHostDirective],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PortalModule_tsickle_Closure_declarations() {\n/** @type {?} */\nPortalModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPortalModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  EmbeddedViewRef,\r\n  ApplicationRef,\r\n  Injector,\r\n} from '@angular/core';\r\nimport {BasePortalHost, ComponentPortal, TemplatePortal} from './portal';\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\rapplication context.\r\rThis is the only part of the portal core that directly touches the DOM.\n */\nexport class DomPortalHost extends BasePortalHost {\n/**\n * @param {?} _hostDomElement\n * @param {?} _componentFactoryResolver\n * @param {?} _appRef\n * @param {?} _defaultInjector\n */\nconstructor(\nprivate _hostDomElement: Element,\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _appRef: ApplicationRef,\nprivate _defaultInjector: Injector) {\r\n    super();\r\n  }\n/**\n * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\r\\@param portal Portal to be attached\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\r\n    let /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\r\n    let /** @type {?} */ componentRef: ComponentRef<T>;\r\n\r\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\r\n    // for the component (in terms of Angular's component tree, not rendering).\r\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\r\n    // and then manually attach the view to the application.\r\n    if (portal.viewContainerRef) {\r\n      componentRef = portal.viewContainerRef.createComponent(\r\n          componentFactory,\r\n          portal.viewContainerRef.length,\r\n          portal.injector || portal.viewContainerRef.parentInjector);\r\n\r\n      this.setDisposeFn(() => componentRef.destroy());\r\n    } else {\r\n      componentRef = componentFactory.create(portal.injector || this._defaultInjector);\r\n      this._appRef.attachView(componentRef.hostView);\r\n      this.setDisposeFn(() => {\r\n        this._appRef.detachView(componentRef.hostView);\r\n        componentRef.destroy();\r\n      });\r\n    }\r\n    // At this point the component has been instantiated, so we move it to the location in the DOM\r\n    // where we want it to be rendered.\r\n    this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\r\n\r\n    return componentRef;\r\n  }\n/**\n * Attaches a template portal to the DOM as an embedded view.\r\\@param portal Portal to be attached.\n * @template C\n * @param {?} portal\n * @return {?}\n */\nattachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\r\n    let /** @type {?} */ viewContainer = portal.viewContainerRef;\r\n    let /** @type {?} */ viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\r\n    viewRef.detectChanges();\r\n\r\n    // The method `createEmbeddedView` will add the view as a child of the viewContainer.\r\n    // But for the DomPortalHost the view can be added everywhere in the DOM (e.g Overlay Container)\r\n    // To move the view to the specified host element. We just re-append the existing root nodes.\r\n    viewRef.rootNodes.forEach(rootNode => this._hostDomElement.appendChild(rootNode));\r\n\r\n    this.setDisposeFn((() => {\r\n      let /** @type {?} */ index = viewContainer.indexOf(viewRef);\r\n      if (index !== -1) {\r\n        viewContainer.remove(index);\r\n      }\r\n    }));\r\n\r\n    // TODO(jelbourn): Return locals from view.\r\n    return viewRef;\r\n  }\n/**\n * Clears out a portal from the DOM.\n * @return {?}\n */\ndispose(): void {\r\n    super.dispose();\r\n    if (this._hostDomElement.parentNode != null) {\r\n      this._hostDomElement.parentNode.removeChild(this._hostDomElement);\r\n    }\r\n  }\n/**\n * Gets the root HTMLElement for an instantiated component.\n * @param {?} componentRef\n * @return {?}\n */\nprivate _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\r\n    return /** @type {?} */(( ( /** @type {?} */((componentRef.hostView as EmbeddedViewRef<any>))).rootNodes[0] as HTMLElement));\r\n  }\r\n}\n\nfunction DomPortalHost_tsickle_Closure_declarations() {\n/** @type {?} */\nDomPortalHost.prototype._hostDomElement;\n/** @type {?} */\nDomPortalHost.prototype._componentFactoryResolver;\n/** @type {?} */\nDomPortalHost.prototype._appRef;\n/** @type {?} */\nDomPortalHost.prototype._defaultInjector;\n}\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n    TemplateRef,\r\n    ViewContainerRef,\r\n    ElementRef,\r\n    ComponentRef,\r\n    EmbeddedViewRef,\r\n    Injector\r\n} from '@angular/core';\r\nimport {\r\n    throwNullPortalHostError,\r\n    throwPortalAlreadyAttachedError,\r\n    throwNoPortalAttachedError,\r\n    throwNullPortalError,\r\n    throwPortalHostAlreadyDisposedError,\r\n    throwUnknownPortalTypeError\r\n} from './portal-errors';\r\n\r\n\r\nexport interface ComponentType<T> {\r\n  new (...args: any[]): T;\r\n}\n/**\n * A `Portal` is something that you want to render somewhere else.\rIt can be attach to / detached from a `PortalHost`.\n * @abstract\n */\nexport abstract class Portal<T> {\nprivate _attachedHost: PortalHost | null;\n/**\n * Attach this portal to a host.\n * @param {?} host\n * @return {?}\n */\nattach(host: PortalHost): T {\r\n    if (host == null) {\r\n      throwNullPortalHostError();\r\n    }\r\n\r\n    if (host.hasAttached()) {\r\n      throwPortalAlreadyAttachedError();\r\n    }\r\n\r\n    this._attachedHost = host;\r\n    return /** @type {?} */(( <T> host.attach(this)));\r\n  }\n/**\n * Detach this portal from its host\n * @return {?}\n */\ndetach(): void {\r\n    let /** @type {?} */ host = this._attachedHost;\r\n\r\n    if (host == null) {\r\n      throwNoPortalAttachedError();\r\n    } else {\r\n      this._attachedHost = null;\r\n      host.detach();\r\n    }\r\n  }\n/**\n * Whether this portal is attached to a host.\n * @return {?}\n */\nget isAttached(): boolean {\r\n    return this._attachedHost != null;\r\n  }\n/**\n * Sets the PortalHost reference without performing `attach()`. This is used directly by\rthe PortalHost when it is performing an `attach()` or `detach()`.\n * @param {?} host\n * @return {?}\n */\nsetAttachedHost(host: PortalHost | null) {\r\n    this._attachedHost = host;\r\n  }\r\n}\n\nfunction Portal_tsickle_Closure_declarations() {\n/** @type {?} */\nPortal.prototype._attachedHost;\n}\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> extends Portal<ComponentRef<T>> {\n/**\n * The type of the component that will be instantiated for attachment.\n */\ncomponent: ComponentType<T>;\n/**\n * [Optional] Where the attached component should live in Angular's *logical* component tree.\rThis is different from where the component *renders*, which is determined by the PortalHost.\rThe origin is necessary when the host is outside of the Angular application context.\n */\nviewContainerRef?: ViewContainerRef | null;\n/**\n * [Optional] Injector used for the instantiation of the component.\n */\ninjector?: Injector | null;\n/**\n * @param {?} component\n * @param {?=} viewContainerRef\n * @param {?=} injector\n */\nconstructor(\r\n      component: ComponentType<T>,\r\n      viewContainerRef?: ViewContainerRef | null,\r\n      injector?: Injector | null) {\r\n    super();\r\n    this.component = component;\r\n    this.viewContainerRef = viewContainerRef;\r\n    this.injector = injector;\r\n  }\r\n}\n\nfunction ComponentPortal_tsickle_Closure_declarations() {\n/**\n * The type of the component that will be instantiated for attachment.\n * @type {?}\n */\nComponentPortal.prototype.component;\n/**\n * [Optional] Where the attached component should live in Angular's *logical* component tree.\rThis is different from where the component *renders*, which is determined by the PortalHost.\rThe origin is necessary when the host is outside of the Angular application context.\n * @type {?}\n */\nComponentPortal.prototype.viewContainerRef;\n/**\n * [Optional] Injector used for the instantiation of the component.\n * @type {?}\n */\nComponentPortal.prototype.injector;\n}\n\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nexport class TemplatePortal<C> extends Portal<C> {\n/**\n * The embedded template that will be used to instantiate an embedded View in the host.\n */\ntemplateRef: TemplateRef<C>;\n/**\n * Reference to the ViewContainer into which the template will be stamped out.\n */\nviewContainerRef: ViewContainerRef;\r\n\r\n  context: C | undefined;\n/**\n * @param {?} template\n * @param {?} viewContainerRef\n * @param {?=} context\n */\nconstructor(template: TemplateRef<any>, viewContainerRef: ViewContainerRef, context?: C) {\r\n    super();\r\n    this.templateRef = template;\r\n    this.viewContainerRef = viewContainerRef;\r\n    if (context) {\r\n      this.context = context;\r\n    }\r\n  }\n/**\n * @return {?}\n */\nget origin(): ElementRef {\r\n    return this.templateRef.elementRef;\r\n  }\n/**\n * Attach the the portal to the provided `PortalHost`.\rWhen a context is provided it will override the `context` property of the `TemplatePortal`\rinstance.\n * @param {?} host\n * @param {?=} context\n * @return {?}\n */\nattach(host: PortalHost, context: C | undefined = this.context): C {\r\n    this.context = context;\r\n    return super.attach(host);\r\n  }\n/**\n * @return {?}\n */\ndetach(): void {\r\n    this.context = undefined;\r\n    return super.detach();\r\n  }\r\n}\n\nfunction TemplatePortal_tsickle_Closure_declarations() {\n/**\n * The embedded template that will be used to instantiate an embedded View in the host.\n * @type {?}\n */\nTemplatePortal.prototype.templateRef;\n/**\n * Reference to the ViewContainer into which the template will be stamped out.\n * @type {?}\n */\nTemplatePortal.prototype.viewContainerRef;\n/** @type {?} */\nTemplatePortal.prototype.context;\n}\n\r\n\r\n\r\n/**\r\n * A `PortalHost` is an space that can contain a single `Portal`.\r\n */\r\nexport interface PortalHost {\r\n  attach(portal: Portal<any>): any;\r\n\r\n  detach(): any;\r\n\r\n  dispose(): void;\r\n\r\n  hasAttached(): boolean;\r\n}\n/**\n * Partial implementation of PortalHost that only deals with attaching either a\rComponentPortal or a TemplatePortal.\n * @abstract\n */\nexport abstract class BasePortalHost implements PortalHost {\n/**\n * The portal currently attached to the host.\n */\nprivate _attachedPortal: Portal<any> | null;\n/**\n * A function that will permanently dispose this host.\n */\nprivate _disposeFn: (() => void) | null;\n/**\n * Whether this host has already been permanently disposed.\n */\nprivate _isDisposed: boolean = false;\n/**\n * Whether this host has an attached portal.\n * @return {?}\n */\nhasAttached(): boolean {\r\n    return !!this._attachedPortal;\r\n  }\n/**\n * @param {?} portal\n * @return {?}\n */\nattach(portal: Portal<any>): any {\r\n    if (!portal) {\r\n      throwNullPortalError();\r\n    }\r\n\r\n    if (this.hasAttached()) {\r\n      throwPortalAlreadyAttachedError();\r\n    }\r\n\r\n    if (this._isDisposed) {\r\n      throwPortalHostAlreadyDisposedError();\r\n    }\r\n\r\n    if (portal instanceof ComponentPortal) {\r\n      this._attachedPortal = portal;\r\n      return this.attachComponentPortal(portal);\r\n    } else if (portal instanceof TemplatePortal) {\r\n      this._attachedPortal = portal;\r\n      return this.attachTemplatePortal(portal);\r\n    }\r\n\r\n    throwUnknownPortalTypeError();\r\n  }\n/**\n * @abstract\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>) {}\n/**\n * @abstract\n * @template C\n * @param {?} portal\n * @return {?}\n */\nattachTemplatePortal<C>(portal: TemplatePortal<C>) {}\n/**\n * @return {?}\n */\ndetach(): void {\r\n    if (this._attachedPortal) {\r\n      this._attachedPortal.setAttachedHost(null);\r\n      this._attachedPortal = null;\r\n    }\r\n\r\n    this._invokeDisposeFn();\r\n  }\n/**\n * @return {?}\n */\ndispose() {\r\n    if (this.hasAttached()) {\r\n      this.detach();\r\n    }\r\n\r\n    this._invokeDisposeFn();\r\n    this._isDisposed = true;\r\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nsetDisposeFn(fn: () => void) {\r\n    this._disposeFn = fn;\r\n  }\n/**\n * @return {?}\n */\nprivate _invokeDisposeFn() {\r\n    if (this._disposeFn) {\r\n      this._disposeFn();\r\n      this._disposeFn = null;\r\n    }\r\n  }\r\n}\n\nfunction BasePortalHost_tsickle_Closure_declarations() {\n/**\n * The portal currently attached to the host.\n * @type {?}\n */\nBasePortalHost.prototype._attachedPortal;\n/**\n * A function that will permanently dispose this host.\n * @type {?}\n */\nBasePortalHost.prototype._disposeFn;\n/**\n * Whether this host has already been permanently disposed.\n * @type {?}\n */\nBasePortalHost.prototype._isDisposed;\n}\n\r\n","\n/**\n * Throws an exception when attempting to attach a null portal to a host.\r\\@docs-private\n * @return {?}\n */\nexport function throwNullPortalError() {\r\n  throw Error('Must provide a portal to attach');\r\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\r\\@docs-private\n * @return {?}\n */\nexport function throwPortalAlreadyAttachedError() {\r\n  throw Error('Host already has a portal attached');\r\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\r\\@docs-private\n * @return {?}\n */\nexport function throwPortalHostAlreadyDisposedError() {\r\n  throw Error('This PortalHost has already been disposed');\r\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\r\\@docs-private\n * @return {?}\n */\nexport function throwUnknownPortalTypeError() {\r\n  throw Error('Attempting to attach an unknown Portal type. BasePortalHost accepts either ' +\r\n                  'a ComponentPortal or a TemplatePortal.');\r\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\r\\@docs-private\n * @return {?}\n */\nexport function throwNullPortalHostError() {\r\n  throw Error('Attempting to attach a portal to a null PortalHost');\r\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\r\\@docs-privatew\n * @return {?}\n */\nexport function throwNoPortalAttachedError() {\r\n  throw Error('Attempting to detach a portal that is not attached to a host');\r\n}\r\n"],"names":[],"mappings":"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"}