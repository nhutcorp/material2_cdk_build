{"version":3,"file":"table.es5.js","sources":["../../../src/cdk/table/index.ts","../../../src/cdk/table/public_api.ts","../../../src/cdk/table/table.ts","../../../src/cdk/table/table-errors.ts","../../../src/cdk/table/cell.ts","../../../src/cdk/table/row.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {DataSource,CdkTableModule,RowPlaceholder,HeaderRowPlaceholder,CDK_TABLE_TEMPLATE,CdkTable,CdkCellDef,CdkHeaderCellDef,CdkColumnDef,CdkHeaderCell,CdkCell,CDK_ROW_TEMPLATE,BaseRowDef,CdkHeaderRowDef,CdkRowDef,CdkCellOutletRowContext,CdkCellOutlet,CdkHeaderRow,CdkRow} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {HeaderRowPlaceholder, RowPlaceholder, CdkTable} from './table';\r\nimport {CdkCellOutlet, CdkHeaderRow, CdkHeaderRowDef, CdkRow, CdkRowDef} from './row';\r\nimport {CdkColumnDef, CdkHeaderCellDef, CdkHeaderCell, CdkCell, CdkCellDef} from './cell';\r\n\r\nexport {RowPlaceholder,HeaderRowPlaceholder,CDK_TABLE_TEMPLATE,CdkTable} from './table';\r\nexport {CdkCellDef,CdkHeaderCellDef,CdkColumnDef,CdkHeaderCell,CdkCell} from './cell';\r\nexport {CDK_ROW_TEMPLATE,BaseRowDef,CdkHeaderRowDef,CdkRowDef,CdkCellOutletRowContext,CdkCellOutlet,CdkHeaderRow,CdkRow} from './row';\r\n\r\n/** Re-export DataSource for a more intuitive experience for users of just the table. */\r\nexport {DataSource} from '@angular/cdk/collections';\r\n\r\nconst /** @type {?} */ EXPORTED_DECLARATIONS = [\r\n  CdkTable,\r\n  CdkRowDef,\r\n  CdkCellDef,\r\n  CdkCellOutlet,\r\n  CdkHeaderCellDef,\r\n  CdkColumnDef,\r\n  CdkCell,\r\n  CdkRow,\r\n  CdkHeaderCell,\r\n  CdkHeaderRow,\r\n  CdkHeaderRowDef,\r\n  RowPlaceholder,\r\n  HeaderRowPlaceholder,\r\n];\nexport class CdkTableModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [CommonModule],\r\n  exports: [EXPORTED_DECLARATIONS],\r\n  declarations: [EXPORTED_DECLARATIONS]\r\n\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CdkTableModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkTableModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkTableModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  EmbeddedViewRef,\r\n  Input,\r\n  isDevMode,\r\n  IterableChangeRecord,\r\n  IterableDiffer,\r\n  IterableDiffers,\r\n  NgIterable,\r\n  QueryList,\r\n  Renderer2,\r\n  TrackByFunction,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\r\nimport {CdkCellOutlet, CdkCellOutletRowContext, CdkHeaderRowDef, CdkRowDef} from './row';\r\nimport {takeUntil} from 'rxjs/operator/takeUntil';\r\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {CdkCellDef, CdkColumnDef, CdkHeaderCellDef} from './cell';\r\nimport {getTableDuplicateColumnNameError, getTableUnknownColumnError} from './table-errors';\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\r\\@docs-private\n */\nexport class RowPlaceholder {\n/**\n * @param {?} viewContainer\n */\nconstructor(public viewContainer: ViewContainerRef) { }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[rowPlaceholder]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction RowPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nRowPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRowPlaceholder.ctorParameters;\n/** @type {?} */\nRowPlaceholder.prototype.viewContainer;\n}\n\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\r\\@docs-private\n */\nexport class HeaderRowPlaceholder {\n/**\n * @param {?} viewContainer\n */\nconstructor(public viewContainer: ViewContainerRef) { }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[headerRowPlaceholder]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction HeaderRowPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nHeaderRowPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHeaderRowPlaceholder.ctorParameters;\n/** @type {?} */\nHeaderRowPlaceholder.prototype.viewContainer;\n}\n\n/**\n * The table template that can be used by the md-table. Should not be used outside of the\rmaterial library.\n */\nexport const CDK_TABLE_TEMPLATE = `\r\n  <ng-container headerRowPlaceholder></ng-container>\r\n  <ng-container rowPlaceholder></ng-container>`;\n/**\n * A data table that connects with a data source to retrieve data of type `T` and renders\ra header row and data rows. Updates the rows when new data is provided by the data source.\n */\nexport class CdkTable<T> implements CollectionViewer {\n/**\n * Subject that emits when the component has been destroyed.\n */\nprivate _onDestroy = new Subject<void>();\n/**\n * Latest data provided by the data source through the connect interface.\n */\nprivate _data: NgIterable<T> = [];\n/**\n * Subscription that listens for the data provided by the data source.\n */\nprivate _renderChangeSubscription: Subscription | null;\n/**\n * Map of all the user's defined columns (header and data cell template) identified by name.\n */\nprivate _columnDefinitionsByName = new Map<string,  CdkColumnDef>();\n/**\n * Differ used to find the changes in the data provided by the data source.\n */\nprivate _dataDiffer: IterableDiffer<T>;\n/**\n * Tracking function that will be used to check the differences in data changes. Used similarly\rto `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\rrelative to the function to know if a row should be added/removed/moved.\rAccepts a function that takes two parameters, `index` and `item`.\n * @param {?} fn\n * @return {?}\n */\nset trackBy(fn: TrackByFunction<T>) {\r\n    if (isDevMode() &&\r\n        fn != null && typeof fn !== 'function' && /** @type {?} */((\r\n        <any>console)) && /** @type {?} */(( <any>console.warn))) {\r\n        console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\r\n    }\r\n    this._trackByFn = fn;\r\n  }\n/**\n * @return {?}\n */\nget trackBy(): TrackByFunction<T> { return this._trackByFn; }\nprivate _trackByFn: TrackByFunction<T>;\n/**\n * Provides a stream containing the latest data array to render. Influenced by the table's\rstream of view window (what rows are currently on screen).\n * @return {?}\n */\nget dataSource(): DataSource<T> { return this._dataSource; }\n/**\n * @param {?} dataSource\n * @return {?}\n */\nset dataSource(dataSource: DataSource<T>) {\r\n    if (this._dataSource !== dataSource) {\r\n      this._switchDataSource(dataSource);\r\n    }\r\n  }\nprivate _dataSource: DataSource<T>;\n/**\n * Stream containing the latest information on what rows are being displayed on screen.\rCan be used by the data source to as a heuristic of what data should be provided.\n */\nviewChange =\r\n      new BehaviorSubject<{start: number, end: number}>({start: 0, end: Number.MAX_VALUE});\r\n\r\n  // Placeholders within the table's template where the header and data rows will be inserted.\r\n   _rowPlaceholder: RowPlaceholder;\r\n   _headerRowPlaceholder: HeaderRowPlaceholder;\n/**\n * The column definitions provided by the user that contain what the header and cells should\rrender for each column.\n */\n_columnDefinitions: QueryList<CdkColumnDef>;\n/**\n * Template used as the header container.\n */\n_headerDefinition: CdkHeaderRowDef;\n/**\n * Set of templates that used as the data row containers.\n */\n_rowDefinitions: QueryList<CdkRowDef>;\n/**\n * @param {?} _differs\n * @param {?} _changeDetectorRef\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} role\n */\nconstructor(private readonly _differs: IterableDiffers,\nprivate readonly _changeDetectorRef: ChangeDetectorRef,\r\n              elementRef: ElementRef,\r\n              renderer: Renderer2,\r\n               role: string) {\r\n    if (!role) {\r\n      renderer.setAttribute(elementRef.nativeElement, 'role', 'grid');\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngOnInit() {\r\n    // TODO(andrewseguin): Setup a listener for scrolling, emit the calculated view to viewChange\r\n    this._dataDiffer = this._differs.find([]).create(this._trackByFn);\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this._cacheColumnDefinitionsByName();\r\n    this._columnDefinitions.changes.subscribe(() => this._cacheColumnDefinitionsByName());\r\n    this._renderHeaderRow();\r\n  }\n/**\n * @return {?}\n */\nngAfterContentChecked() {\r\n    this._renderUpdatedColumns();\r\n    if (this.dataSource && !this._renderChangeSubscription) {\r\n      this._observeRenderChanges();\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._rowPlaceholder.viewContainer.clear();\r\n    this._headerRowPlaceholder.viewContainer.clear();\r\n    this._onDestroy.next();\r\n    this._onDestroy.complete();\r\n\r\n    if (this.dataSource) {\r\n      this.dataSource.disconnect(this);\r\n    }\r\n  }\n/**\n * Update the map containing the content's column definitions.\n * @return {?}\n */\nprivate _cacheColumnDefinitionsByName() {\r\n    this._columnDefinitionsByName.clear();\r\n    this._columnDefinitions.forEach(columnDef => {\r\n      if (this._columnDefinitionsByName.has(columnDef.name)) {\r\n        throw getTableDuplicateColumnNameError(columnDef.name);\r\n      }\r\n      this._columnDefinitionsByName.set(columnDef.name, columnDef);\r\n    });\r\n  }\n/**\n * Check if the header or rows have changed what columns they want to display. If there is a diff,\rthen re-render that section.\n * @return {?}\n */\nprivate _renderUpdatedColumns() {\r\n    // Re-render the rows when the row definition columns change.\r\n    this._rowDefinitions.forEach(rowDefinition => {\r\n      if (!!rowDefinition.getColumnsDiff()) {\r\n        // Reset the data to an empty array so that renderRowChanges will re-render all new rows.\r\n        this._dataDiffer.diff([]);\r\n\r\n        this._rowPlaceholder.viewContainer.clear();\r\n        this._renderRowChanges();\r\n      }\r\n    });\r\n\r\n    // Re-render the header row if there is a difference in its columns.\r\n    if (this._headerDefinition.getColumnsDiff()) {\r\n      this._headerRowPlaceholder.viewContainer.clear();\r\n      this._renderHeaderRow();\r\n    }\r\n  }\n/**\n * Switch to the provided data source by resetting the data and unsubscribing from the current\rrender change subscription if one exists. If the data source is null, interpret this by\rclearing the row placeholder. Otherwise start listening for new data.\n * @param {?} dataSource\n * @return {?}\n */\nprivate _switchDataSource(dataSource: DataSource<T>) {\r\n    this._data = [];\r\n\r\n    if (this.dataSource) {\r\n      this.dataSource.disconnect(this);\r\n    }\r\n\r\n    // Stop listening for data from the previous data source.\r\n    if (this._renderChangeSubscription) {\r\n      this._renderChangeSubscription.unsubscribe();\r\n      this._renderChangeSubscription = null;\r\n    }\r\n\r\n    // Remove the table's rows if there is now no data source\r\n    if (!dataSource) {\r\n      this._rowPlaceholder.viewContainer.clear();\r\n    }\r\n\r\n    this._dataSource = dataSource;\r\n  }\n/**\n * Set up a subscription for the data provided by the data source.\n * @return {?}\n */\nprivate _observeRenderChanges() {\r\n    this._renderChangeSubscription = takeUntil.call(this.dataSource.connect(this), this._onDestroy)\r\n      .subscribe(data => {\r\n        this._data = data;\r\n        this._renderRowChanges();\r\n      });\r\n  }\n/**\n * Create the embedded view for the header template and place it in the header row view container.\n * @return {?}\n */\nprivate _renderHeaderRow() {\r\n    const /** @type {?} */ cells = this._getHeaderCellTemplatesForRow(this._headerDefinition);\r\n    if (!cells.length) { return; }\r\n\r\n    // TODO(andrewseguin): add some code to enforce that exactly\r\n    //   one CdkCellOutlet was instantiated as a result\r\n    //   of `createEmbeddedView`.\r\n    this._headerRowPlaceholder.viewContainer\r\n        .createEmbeddedView(this._headerDefinition.template, {cells});\r\n\r\n    cells.forEach(cell => {\r\n      CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cell.template, {});\r\n    });\r\n\r\n    this._changeDetectorRef.markForCheck();\r\n  }\n/**\n * Check for changes made in the data and render each change (row added/removed/moved).\n * @return {?}\n */\nprivate _renderRowChanges() {\r\n    const /** @type {?} */ changes = this._dataDiffer.diff(this._data);\r\n    if (!changes) { return; }\r\n\r\n    const /** @type {?} */ viewContainer = this._rowPlaceholder.viewContainer;\r\n    changes.forEachOperation(\r\n        (item: IterableChangeRecord<any>, adjustedPreviousIndex: number, currentIndex: number) => {\r\n          if (item.previousIndex == null) {\r\n            this._insertRow(this._data[currentIndex], currentIndex);\r\n          } else if (currentIndex == null) {\r\n            viewContainer.remove(adjustedPreviousIndex);\r\n          } else {\r\n            const /** @type {?} */ view = viewContainer.get(adjustedPreviousIndex);\r\n            viewContainer.move( /** @type {?} */((view)), currentIndex);\r\n          }\r\n        });\r\n\r\n    this._updateRowContext();\r\n  }\n/**\n * Create the embedded view for the data row template and place it in the correct index location\rwithin the data row view container.\n * @param {?} rowData\n * @param {?} index\n * @return {?}\n */\nprivate _insertRow(rowData: T, index: number) {\r\n    // TODO(andrewseguin): Add when predicates to the row definitions\r\n    //   to find the right template to used based on\r\n    //   the data rather than choosing the first row definition.\r\n    const /** @type {?} */ row = this._rowDefinitions.first;\r\n\r\n    // Row context that will be provided to both the created embedded row view and its cells.\r\n    const /** @type {?} */ context: CdkCellOutletRowContext<T> = {$implicit: rowData};\r\n\r\n    // TODO(andrewseguin): add some code to enforce that exactly one\r\n    //   CdkCellOutlet was instantiated as a result  of `createEmbeddedView`.\r\n    this._rowPlaceholder.viewContainer.createEmbeddedView(row.template, context, index);\r\n\r\n    // Insert empty cells if there is no data to improve rendering time.\r\n    const /** @type {?} */ cells = rowData ? this._getCellTemplatesForRow(row) : [];\r\n\r\n    cells.forEach(cell => {\r\n      CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cell.template, context);\r\n    });\r\n\r\n    this._changeDetectorRef.markForCheck();\r\n  }\n/**\n * Updates the context for each row to reflect any data changes that may have caused\rrows to be added, removed, or moved. The view container contains the same context\rthat was provided to each of its cells.\n * @return {?}\n */\nprivate _updateRowContext() {\r\n    const /** @type {?} */ viewContainer = this._rowPlaceholder.viewContainer;\r\n    for (let /** @type {?} */ index = 0, /** @type {?} */ count = viewContainer.length; index < count; index++) {\r\n      const /** @type {?} */ viewRef = /** @type {?} */(( viewContainer.get(index) as EmbeddedViewRef<CdkCellOutletRowContext<T>>));\r\n      viewRef.context.index = index;\r\n      viewRef.context.count = count;\r\n      viewRef.context.first = index === 0;\r\n      viewRef.context.last = index === count - 1;\r\n      viewRef.context.even = index % 2 === 0;\r\n      viewRef.context.odd = !viewRef.context.even;\r\n    }\r\n  }\n/**\n * Returns the cell template definitions to insert into the header\ras defined by its list of columns to display.\n * @param {?} headerDef\n * @return {?}\n */\nprivate _getHeaderCellTemplatesForRow(headerDef: CdkHeaderRowDef): CdkHeaderCellDef[] {\r\n    if (!headerDef.columns) { return []; }\r\n    return headerDef.columns.map(columnId => {\r\n      const /** @type {?} */ column = this._columnDefinitionsByName.get(columnId);\r\n\r\n      if (!column) {\r\n        throw getTableUnknownColumnError(columnId);\r\n      }\r\n\r\n      return column.headerCell;\r\n    });\r\n  }\n/**\n * Returns the cell template definitions to insert in the provided row\ras defined by its list of columns to display.\n * @param {?} rowDef\n * @return {?}\n */\nprivate _getCellTemplatesForRow(rowDef: CdkRowDef): CdkCellDef[] {\r\n    if (!rowDef.columns) { return []; }\r\n    return rowDef.columns.map(columnId => {\r\n      const /** @type {?} */ column = this._columnDefinitionsByName.get(columnId);\r\n\r\n      if (!column) {\r\n        throw getTableUnknownColumnError(columnId);\r\n      }\r\n\r\n      return column.cell;\r\n    });\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'cdk-table',\r\n  template: CDK_TABLE_TEMPLATE,\r\n  host: {\r\n    'class': 'cdk-table',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: IterableDiffers, },\n{type: ChangeDetectorRef, },\n{type: ElementRef, },\n{type: Renderer2, },\n{type: undefined, decorators: [{ type: Attribute, args: ['role', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trackBy': [{ type: Input },],\n'dataSource': [{ type: Input },],\n'_rowPlaceholder': [{ type: ViewChild, args: [RowPlaceholder, ] },],\n'_headerRowPlaceholder': [{ type: ViewChild, args: [HeaderRowPlaceholder, ] },],\n'_columnDefinitions': [{ type: ContentChildren, args: [CdkColumnDef, ] },],\n'_headerDefinition': [{ type: ContentChild, args: [CdkHeaderRowDef, ] },],\n'_rowDefinitions': [{ type: ContentChildren, args: [CdkRowDef, ] },],\n};\n}\n\nfunction CdkTable_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkTable.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkTable.ctorParameters;\n/** @type {?} */\nCdkTable.propDecorators;\n/**\n * Subject that emits when the component has been destroyed.\n * @type {?}\n */\nCdkTable.prototype._onDestroy;\n/**\n * Latest data provided by the data source through the connect interface.\n * @type {?}\n */\nCdkTable.prototype._data;\n/**\n * Subscription that listens for the data provided by the data source.\n * @type {?}\n */\nCdkTable.prototype._renderChangeSubscription;\n/**\n * Map of all the user's defined columns (header and data cell template) identified by name.\n * @type {?}\n */\nCdkTable.prototype._columnDefinitionsByName;\n/**\n * Differ used to find the changes in the data provided by the data source.\n * @type {?}\n */\nCdkTable.prototype._dataDiffer;\n/** @type {?} */\nCdkTable.prototype._trackByFn;\n/** @type {?} */\nCdkTable.prototype._dataSource;\n/**\n * Stream containing the latest information on what rows are being displayed on screen.\rCan be used by the data source to as a heuristic of what data should be provided.\n * @type {?}\n */\nCdkTable.prototype.viewChange;\n/** @type {?} */\nCdkTable.prototype._rowPlaceholder;\n/** @type {?} */\nCdkTable.prototype._headerRowPlaceholder;\n/**\n * The column definitions provided by the user that contain what the header and cells should\rrender for each column.\n * @type {?}\n */\nCdkTable.prototype._columnDefinitions;\n/**\n * Template used as the header container.\n * @type {?}\n */\nCdkTable.prototype._headerDefinition;\n/**\n * Set of templates that used as the data row containers.\n * @type {?}\n */\nCdkTable.prototype._rowDefinitions;\n/** @type {?} */\nCdkTable.prototype._differs;\n/** @type {?} */\nCdkTable.prototype._changeDetectorRef;\n}\n\r\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\r\\@param id Id whose lookup failed.\r\\@docs-private\n * @param {?} id\n * @return {?}\n */\nexport function getTableUnknownColumnError(id: string) {\r\n  return Error(`cdk-table: Could not find column with id \"${id}\".`);\r\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\r\\@docs-private\n * @param {?} name\n * @return {?}\n */\nexport function getTableDuplicateColumnNameError(name: string) {\r\n  return Error(`cdk-table: Duplicate column definition name provided: \"${name}\".`);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {ContentChild, Directive, ElementRef, Input, Renderer2, TemplateRef} from '@angular/core';\n/**\n * Cell definition for a CDK table.\rCaptures the template of a column's data row cell as well as cell-specific properties.\n */\nexport class CdkCellDef {\n/**\n * @param {?} template\n */\nconstructor(public template: TemplateRef<any>) { }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkCellDef]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n];\n}\n\nfunction CdkCellDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkCellDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkCellDef.ctorParameters;\n/** @type {?} */\nCdkCellDef.prototype.template;\n}\n\n/**\n * Header cell definition for a CDK table.\rCaptures the template of a column's header cell and as well as cell-specific properties.\n */\nexport class CdkHeaderCellDef {\n/**\n * @param {?} template\n */\nconstructor(public template: TemplateRef<any>) { }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkHeaderCellDef]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n];\n}\n\nfunction CdkHeaderCellDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkHeaderCellDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkHeaderCellDef.ctorParameters;\n/** @type {?} */\nCdkHeaderCellDef.prototype.template;\n}\n\n/**\n * Column definition for the CDK table.\rDefines a set of cells available for a table column.\n */\nexport class CdkColumnDef {\n/**\n * Unique name for this column.\n * @return {?}\n */\nget name(): string { return this._name; }\n/**\n * @param {?} name\n * @return {?}\n */\nset name(name: string) {\r\n    this._name = name;\r\n    this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\r\n  }\r\n  _name: string;\n/**\n * \\@docs-private\n */\ncell: CdkCellDef;\n/**\n * \\@docs-private\n */\nheaderCell: CdkHeaderCellDef;\n/**\n * Transformed version of the column name that can be used as part of a CSS classname. Excludes\rall non-alphanumeric characters and the special characters '-' and '_'. Any characters that\rdo not match are replaced by the '-' character.\n */\ncssClassFriendlyName: string;\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkColumnDef]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input, args: ['cdkColumnDef', ] },],\n'cell': [{ type: ContentChild, args: [CdkCellDef, ] },],\n'headerCell': [{ type: ContentChild, args: [CdkHeaderCellDef, ] },],\n};\n}\n\nfunction CdkColumnDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkColumnDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkColumnDef.ctorParameters;\n/** @type {?} */\nCdkColumnDef.propDecorators;\n/** @type {?} */\nCdkColumnDef.prototype._name;\n/**\n * \\@docs-private\n * @type {?}\n */\nCdkColumnDef.prototype.cell;\n/**\n * \\@docs-private\n * @type {?}\n */\nCdkColumnDef.prototype.headerCell;\n/**\n * Transformed version of the column name that can be used as part of a CSS classname. Excludes\rall non-alphanumeric characters and the special characters '-' and '_'. Any characters that\rdo not match are replaced by the '-' character.\n * @type {?}\n */\nCdkColumnDef.prototype.cssClassFriendlyName;\n}\n\n/**\n * Header cell template container that adds the right classes and role.\n */\nexport class CdkHeaderCell {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(columnDef: CdkColumnDef, elementRef: ElementRef, renderer: Renderer2) {\r\n    renderer.addClass(elementRef.nativeElement, `cdk-column-${columnDef.cssClassFriendlyName}`);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'cdk-header-cell',\r\n  host: {\r\n    'class': 'cdk-header-cell',\r\n    'role': 'columnheader',\r\n  },\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction CdkHeaderCell_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkHeaderCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkHeaderCell.ctorParameters;\n}\n\n/**\n * Cell template container that adds the right classes and role.\n */\nexport class CdkCell {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(columnDef: CdkColumnDef, elementRef: ElementRef, renderer: Renderer2) {\r\n    renderer.addClass(elementRef.nativeElement, `cdk-column-${columnDef.cssClassFriendlyName}`);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'cdk-cell',\r\n  host: {\r\n    'class': 'cdk-cell',\r\n    'role': 'gridcell',\r\n  },\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction CdkCell_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkCell.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Directive,\r\n  IterableChanges,\r\n  IterableDiffer,\r\n  IterableDiffers,\r\n  SimpleChanges,\r\n  TemplateRef,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {CdkCellDef} from './cell';\n/**\n * The row template that can be used by the md-table. Should not be used outside of the\rmaterial library.\n */\nexport const CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\rfor changes and notifying the table.\n * @abstract\n */\nexport abstract class BaseRowDef {\n/**\n * The columns to be displayed on this row.\n */\ncolumns: string[];\n/**\n * Differ used to check if any changes were made to the columns.\n */\nprotected _columnsDiffer: IterableDiffer<any>;\n/**\n * @param {?} template\n * @param {?} _differs\n */\nconstructor(public template: TemplateRef<any>,\r\n              protected _differs: IterableDiffers) { }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\r\n    // Create a new columns differ if one does not yet exist. Initialize it based on initial value\r\n    // of the columns property.\r\n    const /** @type {?} */ columns = changes['columns'].currentValue;\r\n    if (!this._columnsDiffer && columns) {\r\n      this._columnsDiffer = this._differs.find(columns).create();\r\n      this._columnsDiffer.diff(columns);\r\n    }\r\n  }\n/**\n * Returns the difference between the current columns and the columns from the last diff, or null\rif there is no difference.\n * @return {?}\n */\ngetColumnsDiff(): IterableChanges<any> | null {\r\n    return this._columnsDiffer.diff(this.columns);\r\n  }\r\n}\n\nfunction BaseRowDef_tsickle_Closure_declarations() {\n/**\n * The columns to be displayed on this row.\n * @type {?}\n */\nBaseRowDef.prototype.columns;\n/**\n * Differ used to check if any changes were made to the columns.\n * @type {?}\n */\nBaseRowDef.prototype._columnsDiffer;\n/** @type {?} */\nBaseRowDef.prototype.template;\n/** @type {?} */\nBaseRowDef.prototype._differs;\n}\n\n/**\n * Header row definition for the CDK table.\rCaptures the header row's template and other header properties such as the columns to display.\n */\nexport class CdkHeaderRowDef extends BaseRowDef {\n/**\n * @param {?} template\n * @param {?} _differs\n */\nconstructor(template: TemplateRef<any>, _differs: IterableDiffers) {\r\n    super(template, _differs);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[cdkHeaderRowDef]',\r\n  inputs: ['columns: cdkHeaderRowDef'],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: IterableDiffers, },\n];\n}\n\nfunction CdkHeaderRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkHeaderRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkHeaderRowDef.ctorParameters;\n}\n\n/**\n * Data row definition for the CDK table.\rCaptures the header row's template and other row properties such as the columns to display.\n */\nexport class CdkRowDef extends BaseRowDef {\n/**\n * @param {?} template\n * @param {?} _differs\n */\nconstructor(template: TemplateRef<any>, _differs: IterableDiffers) {\r\n    super(template, _differs);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[cdkRowDef]',\r\n  inputs: ['columns: cdkRowDefColumns'],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: IterableDiffers, },\n];\n}\n\nfunction CdkRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkRowDef.ctorParameters;\n}\n\r\n\r\n/** Context provided to the row cells */\r\nexport interface CdkCellOutletRowContext<T> {\r\n  /** Data for the row that this cell is located within. */\r\n  $implicit: T;\r\n\r\n  /** Index location of the row that this cell is located within. */\r\n  index?: number;\r\n\r\n  /** Length of the number of total rows. */\r\n  count?: number;\r\n\r\n  /** True if this cell is contained in the first row. */\r\n  first?: boolean;\r\n\r\n  /** True if this cell is contained in the last row. */\r\n  last?: boolean;\r\n\r\n  /** True if this cell is contained in a row with an even-numbered index. */\r\n  even?: boolean;\r\n\r\n  /** True if this cell is contained in a row with an odd-numbered index. */\r\n  odd?: boolean;\r\n}\n/**\n * Outlet for rendering cells inside of a row or header row.\r\\@docs-private\n */\nexport class CdkCellOutlet {\n/**\n * The ordered list of cells to render within this outlet's view container\n */\ncells: CdkCellDef[];\n/**\n * The data context to be provided to each cell\n */\ncontext: any;\n/**\n * Static property containing the latest constructed instance of this class.\rUsed by the CDK table when each CdkHeaderRow and CdkRow component is created using\rcreateEmbeddedView. After one of these components are created, this property will provide\ra handle to provide that component's cells and context. After init, the CdkCellOutlet will\rconstruct the cells with the provided context.\n */\nstatic mostRecentCellOutlet: CdkCellOutlet;\n/**\n * @param {?} _viewContainer\n */\nconstructor(public _viewContainer: ViewContainerRef) {\r\n    CdkCellOutlet.mostRecentCellOutlet = this;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkCellOutlet]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction CdkCellOutlet_tsickle_Closure_declarations() {\n/**\n * Static property containing the latest constructed instance of this class.\rUsed by the CDK table when each CdkHeaderRow and CdkRow component is created using\rcreateEmbeddedView. After one of these components are created, this property will provide\ra handle to provide that component's cells and context. After init, the CdkCellOutlet will\rconstruct the cells with the provided context.\n * @type {?}\n */\nCdkCellOutlet.mostRecentCellOutlet;\n/** @type {?} */\nCdkCellOutlet.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkCellOutlet.ctorParameters;\n/**\n * The ordered list of cells to render within this outlet's view container\n * @type {?}\n */\nCdkCellOutlet.prototype.cells;\n/**\n * The data context to be provided to each cell\n * @type {?}\n */\nCdkCellOutlet.prototype.context;\n/** @type {?} */\nCdkCellOutlet.prototype._viewContainer;\n}\n\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nexport class CdkHeaderRow { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'cdk-header-row',\r\n  template: CDK_ROW_TEMPLATE,\r\n  host: {\r\n    'class': 'cdk-header-row',\r\n    'role': 'row',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CdkHeaderRow_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkHeaderRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkHeaderRow.ctorParameters;\n}\n\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nexport class CdkRow { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'cdk-row',\r\n  template: CDK_ROW_TEMPLATE,\r\n  host: {\r\n    'class': 'cdk-row',\r\n    'role': 'row',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CdkRow_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkRow.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":"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"}