{"version":3,"file":"rxjs.es5.js","sources":["../../../src/cdk/rxjs/index.ts","../../../src/cdk/rxjs/rx-operators.ts","../../../src/cdk/rxjs/rx-chain.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {RxChain,StrictRxChain,FinallyBrand,CatchBrand,DoBrand,MapBrand,FilterBrand,ShareBrand,FirstBrand,SwitchMapBrand,StartWithBrand,DebounceTimeBrand,AuditTimeBrand,TakeUntilBrand,finallyOperatorType,catchOperatorType,doOperatorType,mapOperatorType,filterOperatorType,shareOperatorType,firstOperatorType,switchMapOperatorType,startWithOperatorType,debounceTimeOperatorType,auditTimeOperatorType,takeUntilOperatorType,finallyOperator,catchOperator,doOperator,map,filter,share,first,switchMap,startWith,debounceTime,auditTime,takeUntil} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Observable, ObservableInput} from 'rxjs/Observable';\r\nimport {PartialObserver} from 'rxjs/Observer';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {IScheduler} from 'rxjs/Scheduler';\r\nimport {_finally as _finallyOperator} from 'rxjs/operator/finally';\r\nimport {_catch as _catchOperator} from 'rxjs/operator/catch';\r\nimport {_do as _doOperator} from 'rxjs/operator/do';\r\nimport {map as mapOperator} from 'rxjs/operator/map';\r\nimport {filter as filterOperator} from 'rxjs/operator/filter';\r\nimport {share as shareOperator} from 'rxjs/operator/share';\r\nimport {first as firstOperator} from 'rxjs/operator/first';\r\nimport {switchMap as switchMapOperator} from 'rxjs/operator/switchMap';\r\nimport {startWith as startWithOperator} from 'rxjs/operator/startWith';\r\nimport {debounceTime as debounceTimeOperator} from 'rxjs/operator/debounceTime';\r\nimport {auditTime as auditTimeOperator} from 'rxjs/operator/auditTime';\r\nimport {takeUntil as takeUntilOperator} from 'rxjs/operator/takeUntil';\r\n\r\n/**\r\n * Represents a strongly-typed chain of RxJS operators.\r\n *\r\n * We achieve strict type enforcement on the chained operators by creating types that\r\n * *unambiguously* match specific rxjs operators. These unambiguous types are created by\r\n * intersecting a \"brand\" to the `typeof` the existing operator. The brand (a class with a private\r\n * member) effectively forces nominal typing for the operators. This allows typescript to understand\r\n * that, for example, `filter` is *`filter`* and not, say, a map of T => boolean.\r\n *\r\n * The downside to this approach is that operators must be imported in their type-coerced form\r\n * rather than from the normal rxjs location.\r\n */\r\nexport interface StrictRxChain<T> {\r\n  call<R>(operator: mapOperatorType<T, R>,\r\n      project: (value: T, index: number) => R, thisArg?: any): StrictRxChain<R>;\r\n\r\n  call<R>(operator: switchMapOperatorType<T, R>,\r\n      project: (value: T, index: number) => ObservableInput<R>): StrictRxChain<R>;\r\n\r\n  call<R>(operator: catchOperatorType<T, R>,\r\n      selector: (err: any, caught: Observable<T>) => ObservableInput<R>): StrictRxChain<T | R>;\r\n\r\n  call(operator: filterOperatorType<T>,\r\n      predicate: (value: T, index: number) => boolean, thisArg?: any): StrictRxChain<T>;\r\n\r\n  call(operator: shareOperatorType<T>): StrictRxChain<T>;\r\n\r\n  call(operator: finallyOperatorType<T>, action: () => void): StrictRxChain<T>;\r\n\r\n  call(operator: doOperatorType<T>, next: (x: T) => void, error?:\r\n      (e: any) => void, complete?: () => void): StrictRxChain<T>;\r\n\r\n  call(operator: doOperatorType<T>, observer: PartialObserver<T>): StrictRxChain<T>;\r\n\r\n  call(operator: firstOperatorType<T>, thisArg?: any, defaultValue?: any): StrictRxChain<T>;\r\n\r\n  call(operator: firstOperatorType<T>, predicate: (value: T) => boolean): StrictRxChain<T>;\r\n\r\n  call(operator: startWithOperatorType<T>, ...args: any[]): StrictRxChain<T>;\r\n\r\n  call(operator: debounceTimeOperatorType<T>, dueTime: number,\r\n      scheduler?: IScheduler): StrictRxChain<T>;\r\n\r\n  call(operator: auditTimeOperatorType<T>, duration: number,\r\n      scheduler?: IScheduler): StrictRxChain<T>;\r\n\r\n  call(operator: takeUntilOperatorType<T>, notifier: Observable<any>): StrictRxChain<T>;\r\n\r\n  subscribe(fn: (t: T) => void): Subscription;\r\n\r\n  result(): Observable<T>;\r\n}\nexport class FinallyBrand {\nprivate _; }\n\nfunction FinallyBrand_tsickle_Closure_declarations() {\n/** @type {?} */\nFinallyBrand.prototype._;\n}\n\nexport class CatchBrand {\nprivate _; }\n\nfunction CatchBrand_tsickle_Closure_declarations() {\n/** @type {?} */\nCatchBrand.prototype._;\n}\n\nexport class DoBrand {\nprivate _; }\n\nfunction DoBrand_tsickle_Closure_declarations() {\n/** @type {?} */\nDoBrand.prototype._;\n}\n\nexport class MapBrand {\nprivate _; }\n\nfunction MapBrand_tsickle_Closure_declarations() {\n/** @type {?} */\nMapBrand.prototype._;\n}\n\nexport class FilterBrand {\nprivate _; }\n\nfunction FilterBrand_tsickle_Closure_declarations() {\n/** @type {?} */\nFilterBrand.prototype._;\n}\n\nexport class ShareBrand {\nprivate _; }\n\nfunction ShareBrand_tsickle_Closure_declarations() {\n/** @type {?} */\nShareBrand.prototype._;\n}\n\nexport class FirstBrand {\nprivate _; }\n\nfunction FirstBrand_tsickle_Closure_declarations() {\n/** @type {?} */\nFirstBrand.prototype._;\n}\n\nexport class SwitchMapBrand {\nprivate _; }\n\nfunction SwitchMapBrand_tsickle_Closure_declarations() {\n/** @type {?} */\nSwitchMapBrand.prototype._;\n}\n\nexport class StartWithBrand {\nprivate _; }\n\nfunction StartWithBrand_tsickle_Closure_declarations() {\n/** @type {?} */\nStartWithBrand.prototype._;\n}\n\nexport class DebounceTimeBrand {\nprivate _; }\n\nfunction DebounceTimeBrand_tsickle_Closure_declarations() {\n/** @type {?} */\nDebounceTimeBrand.prototype._;\n}\n\nexport class AuditTimeBrand {\nprivate _; }\n\nfunction AuditTimeBrand_tsickle_Closure_declarations() {\n/** @type {?} */\nAuditTimeBrand.prototype._;\n}\n\nexport class TakeUntilBrand {\nprivate _; }\n\nfunction TakeUntilBrand_tsickle_Closure_declarations() {\n/** @type {?} */\nTakeUntilBrand.prototype._;\n}\n\r\n/* tslint:enable:no-unused-variable */\r\n\r\n\r\nexport type finallyOperatorType<T> = typeof _finallyOperator & FinallyBrand;\r\nexport type catchOperatorType<T, R> = typeof _catchOperator & CatchBrand;\r\nexport type doOperatorType<T> = typeof _doOperator & DoBrand;\r\nexport type mapOperatorType<T, R> = typeof mapOperator & MapBrand;\r\nexport type filterOperatorType<T> = typeof filterOperator & FilterBrand;\r\nexport type shareOperatorType<T> = typeof shareOperator & ShareBrand;\r\nexport type firstOperatorType<T> = typeof firstOperator & FirstBrand;\r\nexport type switchMapOperatorType<T, R> = typeof switchMapOperator & SwitchMapBrand;\r\nexport type startWithOperatorType<T> = typeof startWithOperator & StartWithBrand;\r\nexport type debounceTimeOperatorType<T> = typeof debounceTimeOperator & DebounceTimeBrand;\r\nexport type auditTimeOperatorType<T> = typeof auditTimeOperator & AuditTimeBrand;\r\nexport type takeUntilOperatorType<T> = typeof takeUntilOperator & TakeUntilBrand;\r\n\r\n// We add `Function` to the type intersection to make this nomically different from\r\n// `finallyOperatorType` while still being structurally the same. Without this, TypeScript tries to\r\n// reduce `typeof _finallyOperator & FinallyBrand` to `finallyOperatorType<T>` and then fails\r\n// because `T` isn't known.\r\nexport const /** @type {?} */ finallyOperator = /** @type {?} */((\r\n    _finallyOperator as typeof _finallyOperator & FinallyBrand & Function));\r\nexport const /** @type {?} */ catchOperator = /** @type {?} */(( _catchOperator as typeof _catchOperator & CatchBrand & Function));\r\nexport const /** @type {?} */ doOperator = /** @type {?} */(( _doOperator as typeof _doOperator & DoBrand & Function));\r\nexport const /** @type {?} */ map = /** @type {?} */(( mapOperator as typeof mapOperator & MapBrand & Function));\r\nexport const /** @type {?} */ filter = /** @type {?} */(( filterOperator as typeof filterOperator & FilterBrand & Function));\r\nexport const /** @type {?} */ share = /** @type {?} */(( shareOperator as typeof shareOperator & ShareBrand & Function));\r\nexport const /** @type {?} */ first = /** @type {?} */(( firstOperator as typeof firstOperator & FirstBrand & Function));\r\nexport const /** @type {?} */ switchMap = /** @type {?} */(( switchMapOperator as typeof switchMapOperator & SwitchMapBrand & Function));\r\nexport const /** @type {?} */ startWith = /** @type {?} */(( startWithOperator as typeof startWithOperator & StartWithBrand & Function));\r\nexport const /** @type {?} */ debounceTime = /** @type {?} */((\r\n    debounceTimeOperator as typeof debounceTimeOperator & DebounceTimeBrand & Function));\r\nexport const /** @type {?} */ auditTime = /** @type {?} */(( auditTimeOperator as typeof auditTimeOperator & AuditTimeBrand & Function));\r\nexport const /** @type {?} */ takeUntil = /** @type {?} */(( takeUntilOperator as typeof takeUntilOperator & TakeUntilBrand & Function));\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {StrictRxChain} from './rx-operators';\n/**\n * Utility class used to chain RxJS operators.\r\rThis class is the concrete implementation, but the type used by the user when chaining\ris StrictRxChain. The strict chain enforces types on the operators to the same level as\rthe prototype-added equivalents.\n */\nexport class RxChain<T> {\n/**\n * @param {?} _context\n */\nprivate constructor(private _context: Observable<T>) { }\n/**\n * Starts a new chain and specifies the initial `this` value.\r\\@param context Initial `this` value for the chain.\n * @template O\n * @param {?} context\n * @return {?}\n */\nstatic from<O>(context: Observable<O>): StrictRxChain<O> {\r\n    return new RxChain(context);\r\n  }\n/**\n * Invokes an RxJS operator as a part of the chain.\r\\@param operator Operator to be invoked.\r\\@param args Arguments to be passed to the operator.\n * @param {?} operator\n * @param {...?} args\n * @return {?}\n */\ncall(operator: Function, ...args: any[]): RxChain<any> {\r\n    this._context = operator.call(this._context, ...args);\r\n    return this;\r\n  }\n/**\n * Subscribes to the result of the chain.\r\\@param fn Callback to be invoked when the result emits a value.\n * @param {?} fn\n * @return {?}\n */\nsubscribe(fn: (t: T) => void): Subscription {\r\n    return this._context.subscribe(fn);\r\n  }\n/**\n * Returns the result of the chain.\n * @return {?}\n */\nresult(): Observable<T> {\r\n    return this._context;\r\n  }\r\n}\n\nfunction RxChain_tsickle_Closure_declarations() {\n/** @type {?} */\nRxChain.prototype._context;\n}\n\r\n"],"names":["takeUntil","takeUntilOperator","auditTime","auditTimeOperator","debounceTime","debounceTimeOperator","startWith","startWithOperator","switchMap","switchMapOperator","first","firstOperator","share","shareOperator","filter","filterOperator","map","mapOperator","_doOperator","_catchOperator","_finallyOperator"],"mappings":";;;;;;;;;;;;;;;;;;;;AEYA;;;;;;;AAOA,AAAA,MAAA,OAAA,CAAA;;;;IAIA,WAAA,CAA4B,QAAuB,EAAnD;QAA4B,IAA5B,CAAA,QAAoC,GAAR,QAAQ,CAAe;KAAK;;;;;;;;IAQxD,OAAO,IAAI,CAAI,OAAsB,EAArC;QACI,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC;KAC7B;;;;;;;;;IASH,IAAI,CAAC,QAAkB,EAAE,GAAG,IAAW,EAAvC;QACI,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,CAAC;QACvD,OAAA,IAAA,CAAA;KACA;;;;;;;IAOH,SAAS,CAAC,EAAgB,EAA1B;QACI,OAAA,IAAA,CAAA,QAAA,CAAA,SAAA,CAAA,EAAA,CAAA,CAAA;KACD;;;;;IAKH,MAAM,GAAN;QALE,OAAA,IAAA,CAAA,QAAA,CAAA;KAOC;CACF,AAED,AAGC;;ADWD,MAAA,YAAA,CAAA;CACuC;AAEvC,AAKA,AAAA,MAAA,UAAA,CAAA;CANqC;AASrC,AAKA,AAAA,MAAA,OAAA,CAAA;CAbkC;AAgBlC,AAKA,AAAA,MAAA,QAAA,CAAA;CApBmC;AAuBnC,AAKA,AAAA,MAAA,WAAA,CAAA;CA3BsC;AA8BtC,AAKA,AAAA,MAAA,UAAA,CAAA;CAlCqC;AAqCrC,AAKA,AAAA,MAAA,UAAA,CAAA;CAzCqC;AA4CrC,AAKA,AAAA,MAAA,cAAA,CAAA;CAhDyC;AAmDzC,AAKA,AAAA,MAAA,cAAA,CAAA;CAvDyC;AA0DzC,AAKA,AAAA,MAAA,iBAAA,CAAA;CA9D4C;AAiE5C,AAKA,AAAA,MAAA,cAAA,CAAA;CArEyC;AAwEzC,AAKA,AAAA,MAAA,cAAA,CAAA;CA5EyC;AA+EzC,AAqBA;;;;AAIA,AAnFO,MAAM,eAAA,IAoFToB,QAnF6D,CAAA,CAAS;AAoF1E,AAnFO,MAAM,aAAA,IAAgBD,MAAuD,CAAA,CAAS;AAoF7F,AAnFO,MAAM,UAAA,IAAaD,GAA8C,CAAA,CAAS;AAoFjF,AAnFO,MAAMF,KAAA,IAAMC,GAA+C,CAAA,CAAS;AAoF3E,AAnFO,MAAMH,QAAA,IAASC,MAAwD,CAAA,CAAS;AAoFvF,AAnFO,MAAMH,OAAA,IAAQC,KAAqD,CAAA,CAAS;AAoFnF,AAnFO,MAAMH,OAAA,IAAQC,KAAqD,CAAA,CAAS;AAoFnF,AAnFO,MAAMH,WAAA,IAAYC,SAAiE,CAAA,CAAS;AAoFnG,AAnFO,MAAMH,WAAA,IAAYC,SAAiE,CAAA,CAAS;AAoFnG,AAnFO,MAAMH,cAAA,IAoFTC,YAnF0E,CAAA,CAAS;AAoFvF,AAnFO,MAAMH,WAAA,IAAYC,SAAiE,CAAA,CAAS;AAoFnG,AAnFO,MAAMH,WAAA,IAAYC,SAAiE,CAAA,CAAS;;AD5HnG;;GAEG,AAEH,AAA8iB;;"}