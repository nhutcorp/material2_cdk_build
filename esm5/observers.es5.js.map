{"version":3,"file":"observers.es5.js","sources":["../../../src/cdk/observers/index.ts","../../../src/cdk/observers/observe-content.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdMutationObserverFactory,ObserveContent,ObserversModule} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  NgModule,\r\n  Output,\r\n  Input,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  AfterContentInit,\r\n  Injectable,\r\n  NgZone,\r\n} from '@angular/core';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {RxChain, debounceTime} from '@angular/cdk/rxjs';\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\r\\@docs-private\n */\nexport class MdMutationObserverFactory {\n/**\n * @param {?} callback\n * @return {?}\n */\ncreate(callback): MutationObserver | null {\r\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdMutationObserverFactory_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMutationObserverFactory.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMutationObserverFactory.ctorParameters;\n}\n\n/**\n * Directive that triggers a callback whenever the content of\rits associated element has changed.\n */\nexport class ObserveContent implements AfterContentInit, OnDestroy {\nprivate _observer: MutationObserver | null;\n/**\n * Event emitted for each change in the element's content.\n */\nevent = new EventEmitter<MutationRecord[]>();\n/**\n * Used for debouncing the emitted values to the observeContent event.\n */\nprivate _debouncer = new Subject<MutationRecord[]>();\n/**\n * Debounce interval for emitting the changes.\n */\ndebounce: number;\n/**\n * @param {?} _mutationObserverFactory\n * @param {?} _elementRef\n * @param {?} _ngZone\n */\nconstructor(\nprivate _mutationObserverFactory: MdMutationObserverFactory,\nprivate _elementRef: ElementRef,\nprivate _ngZone: NgZone) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    if (this.debounce > 0) {\r\n      this._ngZone.runOutsideAngular(() => {\r\n        RxChain.from(this._debouncer)\r\n          .call(debounceTime, this.debounce)\r\n          .subscribe((mutations: MutationRecord[]) => this.event.emit(mutations));\r\n      });\r\n    } else {\r\n      this._debouncer.subscribe(mutations => this.event.emit(mutations));\r\n    }\r\n\r\n    this._observer = this._ngZone.runOutsideAngular(() => {\r\n      return this._mutationObserverFactory.create((mutations: MutationRecord[]) => {\r\n        this._debouncer.next(mutations);\r\n      });\r\n    });\r\n\r\n    if (this._observer) {\r\n      this._observer.observe(this._elementRef.nativeElement, {\r\n        characterData: true,\r\n        childList: true,\r\n        subtree: true\r\n      });\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    if (this._observer) {\r\n      this._observer.disconnect();\r\n    }\r\n\r\n    this._debouncer.complete();\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[cdkObserveContent]'\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdMutationObserverFactory, },\n{type: ElementRef, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'event': [{ type: Output, args: ['cdkObserveContent', ] },],\n'debounce': [{ type: Input },],\n};\n}\n\nfunction ObserveContent_tsickle_Closure_declarations() {\n/** @type {?} */\nObserveContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nObserveContent.ctorParameters;\n/** @type {?} */\nObserveContent.propDecorators;\n/** @type {?} */\nObserveContent.prototype._observer;\n/**\n * Event emitted for each change in the element's content.\n * @type {?}\n */\nObserveContent.prototype.event;\n/**\n * Used for debouncing the emitted values to the observeContent event.\n * @type {?}\n */\nObserveContent.prototype._debouncer;\n/**\n * Debounce interval for emitting the changes.\n * @type {?}\n */\nObserveContent.prototype.debounce;\n/** @type {?} */\nObserveContent.prototype._mutationObserverFactory;\n/** @type {?} */\nObserveContent.prototype._elementRef;\n/** @type {?} */\nObserveContent.prototype._ngZone;\n}\n\nexport class ObserversModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  exports: [ObserveContent],\r\n  declarations: [ObserveContent],\r\n  providers: [MdMutationObserverFactory]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ObserversModule_tsickle_Closure_declarations() {\n/** @type {?} */\nObserversModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nObserversModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":"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"}