{"version":3,"file":"cdk-scrolling.umd.js","sources":["../../src/cdk/scrolling/index.ts","../../src/cdk/scrolling/public_api.ts","../../src/cdk/scrolling/viewport-ruler.ts","../../src/cdk/scrolling/scrollable.ts","../../src/cdk/scrolling/scroll-dispatcher.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {ScrollDispatchModule,DEFAULT_SCROLL_TIME,ScrollDispatcher,SCROLL_DISPATCHER_PROVIDER_FACTORY,SCROLL_DISPATCHER_PROVIDER,Scrollable,ViewportRuler,VIEWPORT_RULER_PROVIDER_FACTORY,VIEWPORT_RULER_PROVIDER} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {SCROLL_DISPATCHER_PROVIDER} from './scroll-dispatcher';\r\nimport {Scrollable} from './scrollable';\r\nimport {PlatformModule} from '@angular/cdk/platform';\nexport class ScrollDispatchModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [PlatformModule],\r\n  exports: [Scrollable],\r\n  declarations: [Scrollable],\r\n  providers: [SCROLL_DISPATCHER_PROVIDER],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ScrollDispatchModule_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollDispatchModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollDispatchModule.ctorParameters;\n}\n\r\n\r\nexport {DEFAULT_SCROLL_TIME,ScrollDispatcher,SCROLL_DISPATCHER_PROVIDER_FACTORY,SCROLL_DISPATCHER_PROVIDER} from './scroll-dispatcher';\r\nexport {Scrollable} from './scrollable';\r\nexport {ViewportRuler,VIEWPORT_RULER_PROVIDER_FACTORY,VIEWPORT_RULER_PROVIDER} from './viewport-ruler';\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\r\nimport {ScrollDispatcher} from './scroll-dispatcher';\n/**\n * Simple utility for getting the bounds of the browser viewport.\r\\@docs-private\n */\nexport class ViewportRuler {\n/**\n * Cached document client rectangle.\n */\nprivate _documentRect?: ClientRect;\n/**\n * @param {?} scrollDispatcher\n */\nconstructor(scrollDispatcher: ScrollDispatcher) {\r\n    // Subscribe to scroll and resize events and update the document rectangle on changes.\r\n    scrollDispatcher.scrolled(0, () => this._cacheViewportGeometry());\r\n  }\n/**\n * Gets a ClientRect for the viewport's bounds.\n * @param {?=} documentRect\n * @return {?}\n */\ngetViewportRect(documentRect = this._documentRect): ClientRect {\r\n    // Cache the document bounding rect so that we don't recompute it for multiple calls.\r\n    if (!documentRect) {\r\n      this._cacheViewportGeometry();\r\n      documentRect = this._documentRect;\r\n    }\r\n\r\n    // Use the document element's bounding rect rather than the window scroll properties\r\n    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\r\n    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\r\n    // conceptual viewports. Under most circumstances these viewports are equivalent, but they\r\n    // can disagree when the page is pinch-zoomed (on devices that support touch).\r\n    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\r\n    // We use the documentElement instead of the body because, by default (without a css reset)\r\n    // browsers typically give the document body an 8px margin, which is not included in\r\n    // getBoundingClientRect().\r\n    const /** @type {?} */ scrollPosition = this.getViewportScrollPosition(documentRect);\r\n    const /** @type {?} */ height = window.innerHeight;\r\n    const /** @type {?} */ width = window.innerWidth;\r\n\r\n    return {\r\n      top: scrollPosition.top,\r\n      left: scrollPosition.left,\r\n      bottom: scrollPosition.top + height,\r\n      right: scrollPosition.left + width,\r\n      height,\r\n      width,\r\n    };\r\n  }\n/**\n * Gets the (top, left) scroll position of the viewport.\r\\@param documentRect\n * @param {?=} documentRect\n * @return {?}\n */\ngetViewportScrollPosition(documentRect = this._documentRect) {\r\n    // Cache the document bounding rect so that we don't recompute it for multiple calls.\r\n    if (!documentRect) {\r\n      this._cacheViewportGeometry();\r\n      documentRect = this._documentRect;\r\n    }\r\n\r\n    // The top-left-corner of the viewport is determined by the scroll position of the document\r\n    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\r\n    // whether `document.body` or `document.documentElement` is the scrolled element, so reading\r\n    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\r\n    // `document.documentElement` works consistently, where the `top` and `left` values will\r\n    // equal negative the scroll position.\r\n    const /** @type {?} */ top = - /** @type {?} */((documentRect)).top || document.body.scrollTop || window.scrollY ||\r\n                  document.documentElement.scrollTop || 0;\r\n\r\n    const /** @type {?} */ left = - /** @type {?} */((documentRect)).left || document.body.scrollLeft || window.scrollX ||\r\n                  document.documentElement.scrollLeft || 0;\r\n\r\n    return {top, left};\r\n  }\n/**\n * Caches the latest client rectangle of the document element.\n * @return {?}\n */\n_cacheViewportGeometry() {\r\n    this._documentRect = document.documentElement.getBoundingClientRect();\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollDispatcher, },\n];\n}\n\nfunction ViewportRuler_tsickle_Closure_declarations() {\n/** @type {?} */\nViewportRuler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nViewportRuler.ctorParameters;\n/**\n * Cached document client rectangle.\n * @type {?}\n */\nViewportRuler.prototype._documentRect;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentRuler\n * @param {?} scrollDispatcher\n * @return {?}\n */\nexport function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler: ViewportRuler,\r\n                                                scrollDispatcher: ScrollDispatcher) {\r\n  return parentRuler || new ViewportRuler(scrollDispatcher);\r\n}\n/**\n * \\@docs-private\n */\nexport const VIEWPORT_RULER_PROVIDER = {\r\n  // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\r\n  provide: ViewportRuler,\r\n  deps: [[new Optional(), new SkipSelf(), ViewportRuler], ScrollDispatcher],\r\n  useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\r\n};\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive, ElementRef, OnInit, OnDestroy, NgZone, Renderer2} from '@angular/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {ScrollDispatcher} from './scroll-dispatcher';\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\rScrollDispatcher service to include itself as part of its collection of scrolling events that it\rcan be listened to through the service.\n */\nexport class Scrollable implements OnInit, OnDestroy {\nprivate _elementScrolled: Subject<Event> = new Subject();\nprivate _scrollListener: Function | null;\n/**\n * @param {?} _elementRef\n * @param {?} _scroll\n * @param {?} _ngZone\n * @param {?} _renderer\n */\nconstructor(private _elementRef: ElementRef,\nprivate _scroll: ScrollDispatcher,\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2) {}\n/**\n * @return {?}\n */\nngOnInit() {\r\n    this._scrollListener = this._ngZone.runOutsideAngular(() => {\r\n      return this._renderer.listen(this.getElementRef().nativeElement, 'scroll', (event: Event) => {\r\n        this._elementScrolled.next(event);\r\n      });\r\n    });\r\n\r\n    this._scroll.register(this);\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._scroll.deregister(this);\r\n\r\n    if (this._scrollListener) {\r\n      this._scrollListener();\r\n      this._scrollListener = null;\r\n    }\r\n  }\n/**\n * Returns observable that emits when a scroll event is fired on the host element.\n * @return {?}\n */\nelementScrolled(): Observable<any> {\r\n    return this._elementScrolled.asObservable();\r\n  }\n/**\n * @return {?}\n */\ngetElementRef(): ElementRef {\r\n    return this._elementRef;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[cdk-scrollable], [cdkScrollable]'\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ScrollDispatcher, },\n{type: NgZone, },\n{type: Renderer2, },\n];\n}\n\nfunction Scrollable_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollable.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollable.ctorParameters;\n/** @type {?} */\nScrollable.prototype._elementScrolled;\n/** @type {?} */\nScrollable.prototype._scrollListener;\n/** @type {?} */\nScrollable.prototype._elementRef;\n/** @type {?} */\nScrollable.prototype._scroll;\n/** @type {?} */\nScrollable.prototype._ngZone;\n/** @type {?} */\nScrollable.prototype._renderer;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {ElementRef, Injectable, NgZone, Optional, SkipSelf} from '@angular/core';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {fromEvent} from 'rxjs/observable/fromEvent';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {auditTime} from 'rxjs/operator/auditTime';\r\nimport {Scrollable} from './scrollable';\n/**\n * Time in ms to throttle the scrolling events by default.\n */\nexport const DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\rScrollable references emit a scrolled event.\n */\nexport class ScrollDispatcher {\n/**\n * @param {?} _ngZone\n * @param {?} _platform\n */\nconstructor(private _ngZone: NgZone,\nprivate _platform: Platform) { }\n/**\n * Subject for notifying that a registered scrollable reference element has been scrolled.\n */\n_scrolled: Subject<void> = new Subject<void>();\n/**\n * Keeps track of the global `scroll` and `resize` subscriptions.\n */\n_globalSubscription: Subscription | null = null;\n/**\n * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n */\nprivate _scrolledCount = 0;\n/**\n * Map of all the scrollable references that are registered with the service and their\rscroll event subscriptions.\n */\nscrollableReferences: Map<Scrollable, Subscription> = new Map();\n/**\n * Registers a Scrollable with the service and listens for its scrolled events. When the\rscrollable is scrolled, the service emits the event in its scrolled observable.\r\\@param scrollable Scrollable instance to be registered.\n * @param {?} scrollable\n * @return {?}\n */\nregister(scrollable: Scrollable): void {\r\n    const /** @type {?} */ scrollSubscription = scrollable.elementScrolled().subscribe(() => this._notify());\r\n\r\n    this.scrollableReferences.set(scrollable, scrollSubscription);\r\n  }\n/**\n * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\r\\@param scrollable Scrollable instance to be deregistered.\n * @param {?} scrollable\n * @return {?}\n */\nderegister(scrollable: Scrollable): void {\r\n    const /** @type {?} */ scrollableReference = this.scrollableReferences.get(scrollable);\r\n\r\n    if (scrollableReference) {\r\n      scrollableReference.unsubscribe();\r\n      this.scrollableReferences.delete(scrollable);\r\n    }\r\n  }\n/**\n * Subscribes to an observable that emits an event whenever any of the registered Scrollable\rreferences (or window, document, or body) fire a scrolled event. Can provide a time in ms\rto override the default \"throttle\" time.\n * @param {?=} auditTimeInMs\n * @param {?=} callback\n * @return {?}\n */\nscrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME, callback: () => any): Subscription {\r\n    // Scroll events can only happen on the browser, so do nothing if we're not on the browser.\r\n    if (!this._platform.isBrowser) {\r\n      return Subscription.EMPTY;\r\n    }\r\n\r\n    // In the case of a 0ms delay, use an observable without auditTime\r\n    // since it does add a perceptible delay in processing overhead.\r\n    let /** @type {?} */ observable = auditTimeInMs > 0 ?\r\n      auditTime.call(this._scrolled.asObservable(), auditTimeInMs) :\r\n      this._scrolled.asObservable();\r\n\r\n    this._scrolledCount++;\r\n\r\n    if (!this._globalSubscription) {\r\n      this._globalSubscription = this._ngZone.runOutsideAngular(() => {\r\n        return merge(\r\n          fromEvent(window.document, 'scroll'),\r\n          fromEvent(window, 'resize')\r\n        ).subscribe(() => this._notify());\r\n      });\r\n    }\r\n\r\n    // Note that we need to do the subscribing from here, in order to be able to remove\r\n    // the global event listeners once there are no more subscriptions.\r\n    let /** @type {?} */ subscription = observable.subscribe(callback);\r\n\r\n    subscription.add(() => {\r\n      this._scrolledCount--;\r\n\r\n      if (this._globalSubscription && !this.scrollableReferences.size && !this._scrolledCount) {\r\n        this._globalSubscription.unsubscribe();\r\n        this._globalSubscription = null;\r\n      }\r\n    });\r\n\r\n    return subscription;\r\n  }\n/**\n * Returns all registered Scrollables that contain the provided element.\n * @param {?} elementRef\n * @return {?}\n */\ngetScrollContainers(elementRef: ElementRef): Scrollable[] {\r\n    const /** @type {?} */ scrollingContainers: Scrollable[] = [];\r\n\r\n    this.scrollableReferences.forEach((_subscription: Subscription, scrollable: Scrollable) => {\r\n      if (this.scrollableContainsElement(scrollable, elementRef)) {\r\n        scrollingContainers.push(scrollable);\r\n      }\r\n    });\r\n\r\n    return scrollingContainers;\r\n  }\n/**\n * Returns true if the element is contained within the provided Scrollable.\n * @param {?} scrollable\n * @param {?} elementRef\n * @return {?}\n */\nscrollableContainsElement(scrollable: Scrollable, elementRef: ElementRef): boolean {\r\n    let /** @type {?} */ element = elementRef.nativeElement;\r\n    let /** @type {?} */ scrollableElement = scrollable.getElementRef().nativeElement;\r\n\r\n    // Traverse through the element parents until we reach null, checking if any of the elements\r\n    // are the scrollable's element.\r\n    do {\r\n      if (element == scrollableElement) { return true; }\r\n    } while (element = element.parentElement);\r\n\r\n    return false;\r\n  }\n/**\n * Sends a notification that a scroll event has been fired.\n * @return {?}\n */\n_notify() {\r\n    this._scrolled.next();\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Platform, },\n];\n}\n\nfunction ScrollDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollDispatcher.ctorParameters;\n/**\n * Subject for notifying that a registered scrollable reference element has been scrolled.\n * @type {?}\n */\nScrollDispatcher.prototype._scrolled;\n/**\n * Keeps track of the global `scroll` and `resize` subscriptions.\n * @type {?}\n */\nScrollDispatcher.prototype._globalSubscription;\n/**\n * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n * @type {?}\n */\nScrollDispatcher.prototype._scrolledCount;\n/**\n * Map of all the scrollable references that are registered with the service and their\rscroll event subscriptions.\n * @type {?}\n */\nScrollDispatcher.prototype.scrollableReferences;\n/** @type {?} */\nScrollDispatcher.prototype._ngZone;\n/** @type {?} */\nScrollDispatcher.prototype._platform;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nexport function SCROLL_DISPATCHER_PROVIDER_FACTORY(\r\n    parentDispatcher: ScrollDispatcher, ngZone: NgZone, platform: Platform) {\r\n  return parentDispatcher || new ScrollDispatcher(ngZone, platform);\r\n}\n/**\n * \\@docs-private\n */\nexport const SCROLL_DISPATCHER_PROVIDER = {\r\n  // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\r\n  provide: ScrollDispatcher,\r\n  deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone, Platform],\r\n  useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\r\n};\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["NgModule","Optional","SkipSelf","Injectable","NgZone","Platform","merge","fromEvent","auditTime"],"mappings":"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"}