{"version":3,"file":"cdk-collections.umd.js","sources":["../../src/cdk/collections/selection.ts","../../src/cdk/collections/data-source.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Subject} from 'rxjs/Subject';\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nexport class SelectionModel<T> {\n/**\n * Currently-selected values.\n */\nprivate _selection: Set<T> = new Set();\n/**\n * Keeps track of the deselected options that haven't been emitted by the change event.\n */\nprivate _deselectedToEmit: T[] = [];\n/**\n * Keeps track of the selected option that haven't been emitted by the change event.\n */\nprivate _selectedToEmit: T[] = [];\n/**\n * Cache for the array value of the selected items.\n */\nprivate _selected: T[] | null;\n/**\n * Selected value(s).\n * @return {?}\n */\nget selected(): T[] {\r\n    if (!this._selected) {\r\n      this._selected = Array.from(this._selection.values());\r\n    }\r\n\r\n    return this._selected;\r\n  }\n/**\n * Event emitted when the value has changed.\n */\nonChange: Subject<SelectionChange<T>> | null = this._emitChanges ? new Subject() : null;\n/**\n * @param {?=} _isMulti\n * @param {?=} initiallySelectedValues\n * @param {?=} _emitChanges\n */\nconstructor(\nprivate _isMulti = false,\r\n    initiallySelectedValues?: T[],\nprivate _emitChanges = true) {\r\n\r\n    if (initiallySelectedValues) {\r\n      if (_isMulti) {\r\n        initiallySelectedValues.forEach(value => this._markSelected(value));\r\n      } else {\r\n        this._markSelected(initiallySelectedValues[0]);\r\n      }\r\n\r\n      // Clear the array in order to avoid firing the change event for preselected values.\r\n      this._selectedToEmit.length = 0;\r\n    }\r\n  }\n/**\n * Selects a value or an array of values.\n * @param {?} value\n * @return {?}\n */\nselect(value: T): void {\r\n    this._markSelected(value);\r\n    this._emitChangeEvent();\r\n  }\n/**\n * Deselects a value or an array of values.\n * @param {?} value\n * @return {?}\n */\ndeselect(value: T): void {\r\n    this._unmarkSelected(value);\r\n    this._emitChangeEvent();\r\n  }\n/**\n * Toggles a value between selected and deselected.\n * @param {?} value\n * @return {?}\n */\ntoggle(value: T): void {\r\n    this.isSelected(value) ? this.deselect(value) : this.select(value);\r\n  }\n/**\n * Clears all of the selected values.\n * @return {?}\n */\nclear(): void {\r\n    this._unmarkAll();\r\n    this._emitChangeEvent();\r\n  }\n/**\n * Determines whether a value is selected.\n * @param {?} value\n * @return {?}\n */\nisSelected(value: T): boolean {\r\n    return this._selection.has(value);\r\n  }\n/**\n * Determines whether the model does not have a value.\n * @return {?}\n */\nisEmpty(): boolean {\r\n    return this._selection.size === 0;\r\n  }\n/**\n * Determines whether the model has a value.\n * @return {?}\n */\nhasValue(): boolean {\r\n    return !this.isEmpty();\r\n  }\n/**\n * Sorts the selected values based on a predicate function.\n * @param {?=} predicate\n * @return {?}\n */\nsort(predicate?: (a: T, b: T) => number): void {\r\n    if (this._isMulti && this._selected) {\r\n      this._selected.sort(predicate);\r\n    }\r\n  }\n/**\n * Emits a change event and clears the records of selected and deselected values.\n * @return {?}\n */\nprivate _emitChangeEvent() {\r\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\r\n      let /** @type {?} */ eventData = new SelectionChange(this._selectedToEmit, this._deselectedToEmit);\r\n\r\n      if (this.onChange) {\r\n        this.onChange.next(eventData);\r\n      }\r\n\r\n      this._deselectedToEmit = [];\r\n      this._selectedToEmit = [];\r\n    }\r\n\r\n    this._selected = null;\r\n  }\n/**\n * Selects a value.\n * @param {?} value\n * @return {?}\n */\nprivate _markSelected(value: T) {\r\n    if (!this.isSelected(value)) {\r\n      if (!this._isMulti) {\r\n        this._unmarkAll();\r\n      }\r\n\r\n      this._selection.add(value);\r\n\r\n      if (this._emitChanges) {\r\n        this._selectedToEmit.push(value);\r\n      }\r\n    }\r\n  }\n/**\n * Deselects a value.\n * @param {?} value\n * @return {?}\n */\nprivate _unmarkSelected(value: T) {\r\n    if (this.isSelected(value)) {\r\n      this._selection.delete(value);\r\n\r\n      if (this._emitChanges) {\r\n        this._deselectedToEmit.push(value);\r\n      }\r\n    }\r\n  }\n/**\n * Clears out the selected values.\n * @return {?}\n */\nprivate _unmarkAll() {\r\n    if (!this.isEmpty()) {\r\n      this._selection.forEach(value => this._unmarkSelected(value));\r\n    }\r\n  }\r\n}\n\nfunction SelectionModel_tsickle_Closure_declarations() {\n/**\n * Currently-selected values.\n * @type {?}\n */\nSelectionModel.prototype._selection;\n/**\n * Keeps track of the deselected options that haven't been emitted by the change event.\n * @type {?}\n */\nSelectionModel.prototype._deselectedToEmit;\n/**\n * Keeps track of the selected option that haven't been emitted by the change event.\n * @type {?}\n */\nSelectionModel.prototype._selectedToEmit;\n/**\n * Cache for the array value of the selected items.\n * @type {?}\n */\nSelectionModel.prototype._selected;\n/**\n * Event emitted when the value has changed.\n * @type {?}\n */\nSelectionModel.prototype.onChange;\n/** @type {?} */\nSelectionModel.prototype._isMulti;\n/** @type {?} */\nSelectionModel.prototype._emitChanges;\n}\n\n/**\n * Describes an event emitted when the value of a MdSelectionModel has changed.\r\\@docs-private\n */\nexport class SelectionChange<T> {\n/**\n * @param {?=} added\n * @param {?=} removed\n */\nconstructor(public added?: T[],\npublic removed?: T[]) { }\r\n}\n\nfunction SelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectionChange.prototype.added;\n/** @type {?} */\nSelectionChange.prototype.removed;\n}\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Observable} from 'rxjs/Observable';\r\nimport {CollectionViewer} from './collection-viewer';\n/**\n * @abstract\n */\nexport abstract class DataSource<T> {\n/**\n * Connects a collection viewer (such as a data-table) to this data source. Note that\rthe stream provided will be accessed during change detection and should not directly change\rvalues that are bound in template views.\r\\@param collectionViewer The component that exposes a view over the data provided by this\r    data source.\r\\@returns Observable that emits a new value when the data changes.\n * @abstract\n * @param {?} collectionViewer\n * @return {?}\n */\nconnect(collectionViewer: CollectionViewer) {}\n/**\n * Disconnects a collection viewer (such as a data-table) from this data source. Can be used\rto perform any clean-up or tear-down operations when a view is being destroyed.\r\r\\@param collectionViewer The component that exposes a view over the data provided by this\r    data source.\n * @abstract\n * @param {?} collectionViewer\n * @return {?}\n */\ndisconnect(collectionViewer: CollectionViewer) {}\r\n}\r\n"],"names":["Subject"],"mappings":"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"}