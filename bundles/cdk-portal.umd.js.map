{"version":3,"file":"cdk-portal.umd.js","sources":["../../src/cdk/portal/index.ts","../../src/cdk/portal/portal-directives.ts","../../src/cdk/portal/dom-portal-host.ts","../../src/cdk/portal/portal.ts","../../src/cdk/portal/portal-errors.ts","../../node_modules/tslib/tslib.es6.js"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {ComponentType,Portal,ComponentPortal,TemplatePortal,PortalHost,BasePortalHost,DomPortalHost,TemplatePortalDirective,PortalHostDirective,PortalModule} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n    NgModule,\r\n    ComponentRef,\r\n    Directive,\r\n    EmbeddedViewRef,\r\n    TemplateRef,\r\n    ComponentFactoryResolver,\r\n    ViewContainerRef,\r\n    OnDestroy,\r\n    Input,\r\n} from '@angular/core';\r\nimport {Portal, TemplatePortal, ComponentPortal, BasePortalHost} from './portal';\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\rthe directive instance itself can be attached to a host, enabling declarative use of portals.\r\rUsage:\r<ng-template portal #greeting>\r  <p> Hello {{name}} </p>\r</ng-template>\n */\nexport class TemplatePortalDirective extends TemplatePortal<any> {\n/**\n * @param {?} templateRef\n * @param {?} viewContainerRef\n */\nconstructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\r\n    super(templateRef, viewContainerRef);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[cdk-portal], [cdkPortal], [portal]',\r\n  exportAs: 'cdkPortal',\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n];\n}\n\nfunction TemplatePortalDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nTemplatePortalDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTemplatePortalDirective.ctorParameters;\n}\n\n/**\n * Directive version of a PortalHost. Because the directive *is* a PortalHost, portals can be\rdirectly attached to it, enabling declarative use.\r\rUsage:\r<ng-template [cdkPortalHost]=\"greeting\"></ng-template>\n */\nexport class PortalHostDirective extends BasePortalHost implements OnDestroy {\n/**\n * The attached portal.\n */\nprivate _portal: Portal<any> | null = null;\n/**\n * @param {?} _componentFactoryResolver\n * @param {?} _viewContainerRef\n */\nconstructor(\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _viewContainerRef: ViewContainerRef) {\r\n    super();\r\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedPortal() { return this.portal; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedPortal(v) { this.portal = v; }\n/**\n * Portal associated with the Portal host.\n * @return {?}\n */\nget portal(): Portal<any> | null {\r\n    return this._portal;\r\n  }\n/**\n * @param {?} portal\n * @return {?}\n */\nset portal(portal: Portal<any> | null) {\r\n    if (this.hasAttached()) {\r\n      super.detach();\r\n    }\r\n\r\n    if (portal) {\r\n      super.attach(portal);\r\n    }\r\n\r\n    this._portal = portal;\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    super.dispose();\r\n    this._portal = null;\r\n  }\n/**\n * Attach the given ComponentPortal to this PortalHost using the ComponentFactoryResolver.\r\r\\@param portal Portal to be attached to the portal host.\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\r\n    portal.setAttachedHost(this);\r\n\r\n    // If the portal specifies an origin, use that as the logical location of the component\r\n    // in the application tree. Otherwise use the location of this PortalHost.\r\n    let /** @type {?} */ viewContainerRef = portal.viewContainerRef != null ?\r\n        portal.viewContainerRef :\r\n        this._viewContainerRef;\r\n\r\n    let /** @type {?} */ componentFactory =\r\n        this._componentFactoryResolver.resolveComponentFactory(portal.component);\r\n    let /** @type {?} */ ref = viewContainerRef.createComponent(\r\n        componentFactory, viewContainerRef.length,\r\n        portal.injector || viewContainerRef.parentInjector);\r\n\r\n    super.setDisposeFn(() => ref.destroy());\r\n    this._portal = portal;\r\n\r\n    return ref;\r\n  }\n/**\n * Attach the given TemplatePortal to this PortlHost as an embedded View.\r\\@param portal Portal to be attached.\n * @template C\n * @param {?} portal\n * @return {?}\n */\nattachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\r\n    portal.setAttachedHost(this);\r\n    const /** @type {?} */ viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\r\n    super.setDisposeFn(() => this._viewContainerRef.clear());\r\n\r\n    this._portal = portal;\r\n\r\n    return viewRef;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[cdkPortalHost], [portalHost]',\r\n  inputs: ['portal: cdkPortalHost']\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ComponentFactoryResolver, },\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_deprecatedPortal': [{ type: Input, args: ['portalHost', ] },],\n};\n}\n\nfunction PortalHostDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPortalHostDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPortalHostDirective.ctorParameters;\n/** @type {?} */\nPortalHostDirective.propDecorators;\n/**\n * The attached portal.\n * @type {?}\n */\nPortalHostDirective.prototype._portal;\n/** @type {?} */\nPortalHostDirective.prototype._componentFactoryResolver;\n/** @type {?} */\nPortalHostDirective.prototype._viewContainerRef;\n}\n\nexport class PortalModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  exports: [TemplatePortalDirective, PortalHostDirective],\r\n  declarations: [TemplatePortalDirective, PortalHostDirective],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PortalModule_tsickle_Closure_declarations() {\n/** @type {?} */\nPortalModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPortalModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  EmbeddedViewRef,\r\n  ApplicationRef,\r\n  Injector,\r\n} from '@angular/core';\r\nimport {BasePortalHost, ComponentPortal, TemplatePortal} from './portal';\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\rapplication context.\r\rThis is the only part of the portal core that directly touches the DOM.\n */\nexport class DomPortalHost extends BasePortalHost {\n/**\n * @param {?} _hostDomElement\n * @param {?} _componentFactoryResolver\n * @param {?} _appRef\n * @param {?} _defaultInjector\n */\nconstructor(\nprivate _hostDomElement: Element,\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _appRef: ApplicationRef,\nprivate _defaultInjector: Injector) {\r\n    super();\r\n  }\n/**\n * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\r\\@param portal Portal to be attached\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\r\n    let /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\r\n    let /** @type {?} */ componentRef: ComponentRef<T>;\r\n\r\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\r\n    // for the component (in terms of Angular's component tree, not rendering).\r\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\r\n    // and then manually attach the view to the application.\r\n    if (portal.viewContainerRef) {\r\n      componentRef = portal.viewContainerRef.createComponent(\r\n          componentFactory,\r\n          portal.viewContainerRef.length,\r\n          portal.injector || portal.viewContainerRef.parentInjector);\r\n\r\n      this.setDisposeFn(() => componentRef.destroy());\r\n    } else {\r\n      componentRef = componentFactory.create(portal.injector || this._defaultInjector);\r\n      this._appRef.attachView(componentRef.hostView);\r\n      this.setDisposeFn(() => {\r\n        this._appRef.detachView(componentRef.hostView);\r\n        componentRef.destroy();\r\n      });\r\n    }\r\n    // At this point the component has been instantiated, so we move it to the location in the DOM\r\n    // where we want it to be rendered.\r\n    this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\r\n\r\n    return componentRef;\r\n  }\n/**\n * Attaches a template portal to the DOM as an embedded view.\r\\@param portal Portal to be attached.\n * @template C\n * @param {?} portal\n * @return {?}\n */\nattachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\r\n    let /** @type {?} */ viewContainer = portal.viewContainerRef;\r\n    let /** @type {?} */ viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\r\n    viewRef.detectChanges();\r\n\r\n    // The method `createEmbeddedView` will add the view as a child of the viewContainer.\r\n    // But for the DomPortalHost the view can be added everywhere in the DOM (e.g Overlay Container)\r\n    // To move the view to the specified host element. We just re-append the existing root nodes.\r\n    viewRef.rootNodes.forEach(rootNode => this._hostDomElement.appendChild(rootNode));\r\n\r\n    this.setDisposeFn((() => {\r\n      let /** @type {?} */ index = viewContainer.indexOf(viewRef);\r\n      if (index !== -1) {\r\n        viewContainer.remove(index);\r\n      }\r\n    }));\r\n\r\n    // TODO(jelbourn): Return locals from view.\r\n    return viewRef;\r\n  }\n/**\n * Clears out a portal from the DOM.\n * @return {?}\n */\ndispose(): void {\r\n    super.dispose();\r\n    if (this._hostDomElement.parentNode != null) {\r\n      this._hostDomElement.parentNode.removeChild(this._hostDomElement);\r\n    }\r\n  }\n/**\n * Gets the root HTMLElement for an instantiated component.\n * @param {?} componentRef\n * @return {?}\n */\nprivate _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\r\n    return /** @type {?} */(( ( /** @type {?} */((componentRef.hostView as EmbeddedViewRef<any>))).rootNodes[0] as HTMLElement));\r\n  }\r\n}\n\nfunction DomPortalHost_tsickle_Closure_declarations() {\n/** @type {?} */\nDomPortalHost.prototype._hostDomElement;\n/** @type {?} */\nDomPortalHost.prototype._componentFactoryResolver;\n/** @type {?} */\nDomPortalHost.prototype._appRef;\n/** @type {?} */\nDomPortalHost.prototype._defaultInjector;\n}\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n    TemplateRef,\r\n    ViewContainerRef,\r\n    ElementRef,\r\n    ComponentRef,\r\n    EmbeddedViewRef,\r\n    Injector\r\n} from '@angular/core';\r\nimport {\r\n    throwNullPortalHostError,\r\n    throwPortalAlreadyAttachedError,\r\n    throwNoPortalAttachedError,\r\n    throwNullPortalError,\r\n    throwPortalHostAlreadyDisposedError,\r\n    throwUnknownPortalTypeError\r\n} from './portal-errors';\r\n\r\n\r\nexport interface ComponentType<T> {\r\n  new (...args: any[]): T;\r\n}\n/**\n * A `Portal` is something that you want to render somewhere else.\rIt can be attach to / detached from a `PortalHost`.\n * @abstract\n */\nexport abstract class Portal<T> {\nprivate _attachedHost: PortalHost | null;\n/**\n * Attach this portal to a host.\n * @param {?} host\n * @return {?}\n */\nattach(host: PortalHost): T {\r\n    if (host == null) {\r\n      throwNullPortalHostError();\r\n    }\r\n\r\n    if (host.hasAttached()) {\r\n      throwPortalAlreadyAttachedError();\r\n    }\r\n\r\n    this._attachedHost = host;\r\n    return /** @type {?} */(( <T> host.attach(this)));\r\n  }\n/**\n * Detach this portal from its host\n * @return {?}\n */\ndetach(): void {\r\n    let /** @type {?} */ host = this._attachedHost;\r\n\r\n    if (host == null) {\r\n      throwNoPortalAttachedError();\r\n    } else {\r\n      this._attachedHost = null;\r\n      host.detach();\r\n    }\r\n  }\n/**\n * Whether this portal is attached to a host.\n * @return {?}\n */\nget isAttached(): boolean {\r\n    return this._attachedHost != null;\r\n  }\n/**\n * Sets the PortalHost reference without performing `attach()`. This is used directly by\rthe PortalHost when it is performing an `attach()` or `detach()`.\n * @param {?} host\n * @return {?}\n */\nsetAttachedHost(host: PortalHost | null) {\r\n    this._attachedHost = host;\r\n  }\r\n}\n\nfunction Portal_tsickle_Closure_declarations() {\n/** @type {?} */\nPortal.prototype._attachedHost;\n}\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> extends Portal<ComponentRef<T>> {\n/**\n * The type of the component that will be instantiated for attachment.\n */\ncomponent: ComponentType<T>;\n/**\n * [Optional] Where the attached component should live in Angular's *logical* component tree.\rThis is different from where the component *renders*, which is determined by the PortalHost.\rThe origin is necessary when the host is outside of the Angular application context.\n */\nviewContainerRef?: ViewContainerRef | null;\n/**\n * [Optional] Injector used for the instantiation of the component.\n */\ninjector?: Injector | null;\n/**\n * @param {?} component\n * @param {?=} viewContainerRef\n * @param {?=} injector\n */\nconstructor(\r\n      component: ComponentType<T>,\r\n      viewContainerRef?: ViewContainerRef | null,\r\n      injector?: Injector | null) {\r\n    super();\r\n    this.component = component;\r\n    this.viewContainerRef = viewContainerRef;\r\n    this.injector = injector;\r\n  }\r\n}\n\nfunction ComponentPortal_tsickle_Closure_declarations() {\n/**\n * The type of the component that will be instantiated for attachment.\n * @type {?}\n */\nComponentPortal.prototype.component;\n/**\n * [Optional] Where the attached component should live in Angular's *logical* component tree.\rThis is different from where the component *renders*, which is determined by the PortalHost.\rThe origin is necessary when the host is outside of the Angular application context.\n * @type {?}\n */\nComponentPortal.prototype.viewContainerRef;\n/**\n * [Optional] Injector used for the instantiation of the component.\n * @type {?}\n */\nComponentPortal.prototype.injector;\n}\n\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nexport class TemplatePortal<C> extends Portal<C> {\n/**\n * The embedded template that will be used to instantiate an embedded View in the host.\n */\ntemplateRef: TemplateRef<C>;\n/**\n * Reference to the ViewContainer into which the template will be stamped out.\n */\nviewContainerRef: ViewContainerRef;\r\n\r\n  context: C | undefined;\n/**\n * @param {?} template\n * @param {?} viewContainerRef\n * @param {?=} context\n */\nconstructor(template: TemplateRef<any>, viewContainerRef: ViewContainerRef, context?: C) {\r\n    super();\r\n    this.templateRef = template;\r\n    this.viewContainerRef = viewContainerRef;\r\n    if (context) {\r\n      this.context = context;\r\n    }\r\n  }\n/**\n * @return {?}\n */\nget origin(): ElementRef {\r\n    return this.templateRef.elementRef;\r\n  }\n/**\n * Attach the the portal to the provided `PortalHost`.\rWhen a context is provided it will override the `context` property of the `TemplatePortal`\rinstance.\n * @param {?} host\n * @param {?=} context\n * @return {?}\n */\nattach(host: PortalHost, context: C | undefined = this.context): C {\r\n    this.context = context;\r\n    return super.attach(host);\r\n  }\n/**\n * @return {?}\n */\ndetach(): void {\r\n    this.context = undefined;\r\n    return super.detach();\r\n  }\r\n}\n\nfunction TemplatePortal_tsickle_Closure_declarations() {\n/**\n * The embedded template that will be used to instantiate an embedded View in the host.\n * @type {?}\n */\nTemplatePortal.prototype.templateRef;\n/**\n * Reference to the ViewContainer into which the template will be stamped out.\n * @type {?}\n */\nTemplatePortal.prototype.viewContainerRef;\n/** @type {?} */\nTemplatePortal.prototype.context;\n}\n\r\n\r\n\r\n/**\r\n * A `PortalHost` is an space that can contain a single `Portal`.\r\n */\r\nexport interface PortalHost {\r\n  attach(portal: Portal<any>): any;\r\n\r\n  detach(): any;\r\n\r\n  dispose(): void;\r\n\r\n  hasAttached(): boolean;\r\n}\n/**\n * Partial implementation of PortalHost that only deals with attaching either a\rComponentPortal or a TemplatePortal.\n * @abstract\n */\nexport abstract class BasePortalHost implements PortalHost {\n/**\n * The portal currently attached to the host.\n */\nprivate _attachedPortal: Portal<any> | null;\n/**\n * A function that will permanently dispose this host.\n */\nprivate _disposeFn: (() => void) | null;\n/**\n * Whether this host has already been permanently disposed.\n */\nprivate _isDisposed: boolean = false;\n/**\n * Whether this host has an attached portal.\n * @return {?}\n */\nhasAttached(): boolean {\r\n    return !!this._attachedPortal;\r\n  }\n/**\n * @param {?} portal\n * @return {?}\n */\nattach(portal: Portal<any>): any {\r\n    if (!portal) {\r\n      throwNullPortalError();\r\n    }\r\n\r\n    if (this.hasAttached()) {\r\n      throwPortalAlreadyAttachedError();\r\n    }\r\n\r\n    if (this._isDisposed) {\r\n      throwPortalHostAlreadyDisposedError();\r\n    }\r\n\r\n    if (portal instanceof ComponentPortal) {\r\n      this._attachedPortal = portal;\r\n      return this.attachComponentPortal(portal);\r\n    } else if (portal instanceof TemplatePortal) {\r\n      this._attachedPortal = portal;\r\n      return this.attachTemplatePortal(portal);\r\n    }\r\n\r\n    throwUnknownPortalTypeError();\r\n  }\n/**\n * @abstract\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>) {}\n/**\n * @abstract\n * @template C\n * @param {?} portal\n * @return {?}\n */\nattachTemplatePortal<C>(portal: TemplatePortal<C>) {}\n/**\n * @return {?}\n */\ndetach(): void {\r\n    if (this._attachedPortal) {\r\n      this._attachedPortal.setAttachedHost(null);\r\n      this._attachedPortal = null;\r\n    }\r\n\r\n    this._invokeDisposeFn();\r\n  }\n/**\n * @return {?}\n */\ndispose() {\r\n    if (this.hasAttached()) {\r\n      this.detach();\r\n    }\r\n\r\n    this._invokeDisposeFn();\r\n    this._isDisposed = true;\r\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nsetDisposeFn(fn: () => void) {\r\n    this._disposeFn = fn;\r\n  }\n/**\n * @return {?}\n */\nprivate _invokeDisposeFn() {\r\n    if (this._disposeFn) {\r\n      this._disposeFn();\r\n      this._disposeFn = null;\r\n    }\r\n  }\r\n}\n\nfunction BasePortalHost_tsickle_Closure_declarations() {\n/**\n * The portal currently attached to the host.\n * @type {?}\n */\nBasePortalHost.prototype._attachedPortal;\n/**\n * A function that will permanently dispose this host.\n * @type {?}\n */\nBasePortalHost.prototype._disposeFn;\n/**\n * Whether this host has already been permanently disposed.\n * @type {?}\n */\nBasePortalHost.prototype._isDisposed;\n}\n\r\n","\n/**\n * Throws an exception when attempting to attach a null portal to a host.\r\\@docs-private\n * @return {?}\n */\nexport function throwNullPortalError() {\r\n  throw Error('Must provide a portal to attach');\r\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\r\\@docs-private\n * @return {?}\n */\nexport function throwPortalAlreadyAttachedError() {\r\n  throw Error('Host already has a portal attached');\r\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\r\\@docs-private\n * @return {?}\n */\nexport function throwPortalHostAlreadyDisposedError() {\r\n  throw Error('This PortalHost has already been disposed');\r\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\r\\@docs-private\n * @return {?}\n */\nexport function throwUnknownPortalTypeError() {\r\n  throw Error('Attempting to attach an unknown Portal type. BasePortalHost accepts either ' +\r\n                  'a ComponentPortal or a TemplatePortal.');\r\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\r\\@docs-private\n * @return {?}\n */\nexport function throwNullPortalHostError() {\r\n  throw Error('Attempting to attach a portal to a null PortalHost');\r\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\r\\@docs-privatew\n * @return {?}\n */\nexport function throwNoPortalAttachedError() {\r\n  throw Error('Attempting to detach a portal that is not attached to a host');\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}"],"names":["TemplateRef","tslib_1.__extends"],"mappings":"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"}